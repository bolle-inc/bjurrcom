<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss"><channel><title><![CDATA[Tomas Bjerre:s blog]]></title><description><![CDATA[My blog on things I find interesting.]]></description><link>https://bjurr.com/</link><image><url>https://bjurr.com/favicon.png</url><title>Tomas Bjerre:s blog</title><link>https://bjurr.com/</link></image><generator>Ghost 1.14</generator><lastBuildDate>Wed, 18 Oct 2017 14:36:49 GMT</lastBuildDate><atom:link href="https://bjurr.com/rss" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[FitNesse with Maven and Jenkins]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I needed to automate <a href="http://www.fitnesse.org/">FitNesse</a> tests in my clients build process. I also needed the test cases in Git so that <em>testers</em> can develop tests in the same feature branches as the <em>developers</em> are using.</p>
<p>I was looking for a simple way of doing that in a Java project where</p></div>]]></description><link>https://bjurr.com/fitnesse-with-maven-and-jenkins/</link><guid isPermaLink="false">59e067ad8edbbd05ee0cef90</guid><category><![CDATA[fitnesse]]></category><category><![CDATA[Jenkins]]></category><category><![CDATA[maven]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Fri, 13 Oct 2017 07:32:28 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I needed to automate <a href="http://www.fitnesse.org/">FitNesse</a> tests in my clients build process. I also needed the test cases in Git so that <em>testers</em> can develop tests in the same feature branches as the <em>developers</em> are using.</p>
<p>I was looking for a simple way of doing that in a Java project where Maven and Jenkins is being used. I did not find any acceptable solutiion, here is my solution.</p>
<h1 id="whatifound">What I Found</h1>
<p>I found <a href="http://www.fitnesse.org/FitNesse.UserGuide.WritingAcceptanceTests.RunningFromJunit">Running from Junit</a> in the official documentation. But I was unable to use it.</p>
<ul>
<li>That API looks strange and it is unclear how to use it.</li>
<li>I could not find any API for specifying where the jar files, with the <em>service under test</em>, are on the filesystem. When digging into the code on GitHub I concluded that there are no such feature.</li>
</ul>
<p>I found the <a href="https://wiki.jenkins.io/display/JENKINS/FitNesse+Plugin">Jenkins Plugin</a> but I wanted testers to be able to work with the test cases locally. That plugin would only, potentially, solve it in Jenkins. There is also <a href="http://blog.xebia.com/how-to-integrate-fitnesse-tests-into-jenkins/">Xebia</a> but same problem there.</p>
<h1 id="whatidid">What I Did</h1>
<p>I created a <code>pom</code> that uses <code>antrun</code> to basically just run the <code>java</code> program with command line arguments. The version of FitNesse is managed in the <code>pom</code>.</p>
<p>The wiki pages have:</p>
<pre><code>!define TEST_SYSTEM {slim}
!path target/dependencies/*.jar
</code></pre>
<p>Here is the <code>pom.xml</code>.</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
 &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

 &lt;artifactId&gt;bjurr-fitnesse&lt;/artifactId&gt;

 &lt;dependencies&gt;
  &lt;dependency&gt;
   &lt;groupId&gt;org.fitnesse&lt;/groupId&gt;
   &lt;artifactId&gt;fitnesse&lt;/artifactId&gt;
   &lt;version&gt;20161106&lt;/version&gt;
   &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
 &lt;/dependencies&gt;

 &lt;properties&gt;
  &lt;fitnesse.command&gt;&lt;/fitnesse.command&gt;
 &lt;/properties&gt;

 &lt;build&gt;
  &lt;plugins&gt;
   &lt;plugin&gt;
    &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.3&lt;/version&gt;
    &lt;executions&gt;
     &lt;execution&gt;
      &lt;id&gt;start-fitnesse&lt;/id&gt;
      &lt;phase&gt;test&lt;/phase&gt;
      &lt;configuration&gt;
       &lt;tasks&gt;
        &lt;copy todir=&quot;target/dependencies&quot; flatten=&quot;true&quot;&gt;
         &lt;fileset dir=&quot;../&quot;&gt;
          &lt;include name=&quot;**/*.jar&quot; /&gt;
         &lt;/fileset&gt;
        &lt;/copy&gt;
        &lt;echo message=&quot;&quot; /&gt;
        &lt;echo message=&quot;&quot; /&gt;
        &lt;echo message=&quot;Fitnesse wiki available here:&quot; /&gt;
        &lt;echo message=&quot;&quot; /&gt;
        &lt;echo message=&quot;  http://localhost:8888/MyTests.MySuite&quot; /&gt;
        &lt;echo message=&quot;&quot; /&gt;
        &lt;echo message=&quot;&quot; /&gt;
        &lt;java classname=&quot;fitnesseMain.FitNesseMain&quot; classpathref=&quot;maven.test.classpath&quot;
         fork=&quot;true&quot;&gt;
         &lt;arg line=&quot;-p 8888&quot; /&gt;
         &lt;arg line=&quot;-d .&quot; /&gt;
         &lt;arg line=&quot;-e 9999&quot; /&gt;
         &lt;arg line=&quot;-b target/fitnesse-junit.xml&quot; /&gt;
         &lt;arg line=&quot;${fitnesse.command}&quot; /&gt;
         &lt;jvmarg value=&quot;-Xmx1024m&quot; /&gt;
        &lt;/java&gt;
       &lt;/tasks&gt;
      &lt;/configuration&gt;
      &lt;goals&gt;
       &lt;goal&gt;run&lt;/goal&gt;
      &lt;/goals&gt;
     &lt;/execution&gt;
    &lt;/executions&gt;
   &lt;/plugin&gt;
  &lt;/plugins&gt;
 &lt;/build&gt;
&lt;/project&gt;
</code></pre>
<p>To start the wiki to work with the test cases I do:<br>
<code>mvn test</code><br>
And that will start the FitNesse wiki on <em>localhost</em>.</p>
<p>When tests change, the changed wiki pages are committet and pushed to the remote repo.</p>
<p>To run all the tests I do:<br>
<code>mvn test -Dfitnesse.command=&quot;-c MyTests.MySuite?suite&amp;format=junit&quot;</code><br>
And in Jenkins I use the <a href="https://wiki.jenkins.io/display/JENKINS/Lockable+Resources+Plugin">Lockable Resources Plugin</a> to allow IP port collision and only have one job running FitNesse at once.</p>
<p>A pipeline <code>stage</code> may look like this:</p>
<pre><code>...
stage('FitNesse test') {
  lock(resource: &quot;compiler_${env.NODE_NAME}&quot;, inversePrecedence: true) {
   try {
    sh &quot;&quot;&quot;
    cd fitnesse
    ${mvnHome}/bin/mvn test -Dfitnesse.command=\&quot;-c MyTests.MySuite?suite&amp;format=junit\&quot;
    &quot;&quot;&quot;
    junit &quot;**/fitnesse/target/*.xml&quot;
    commentMr(env.gitlabMergeRequestId, &quot;FitNesse ok :) $gitlabSourceBranch ${BUILD_URL}&quot;)
   } catch (e) {
    commentMr(env.gitlabMergeRequestId, &quot;FitNesse **not ok** in $gitlabSourceBranch ${BUILD_URL}&quot;)
    junit &quot;**/fitnesse/target/*.xml&quot;
    throw e
   }
  }
 }
...
</code></pre>
</div>]]></content:encoded></item><item><title><![CDATA[Ghost 1.0 free hosting with HTTPS and custom domain]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I have been using <a href="https://ghost.org/">Ghost blogging platform</a> for a few years now and I really like it! I have previously written about how I set it up with <a href="https://bjurr.com/ghost-blog-on-github-pages/">GitHub pages and Buster</a>. However a few important things have changed since then:</p>
<ul>
<li>Buster is <a href="https://github.com/axitkhurana/buster/issues/66">no longer maintained</a>.</li>
<li>Google is ranking HTTPS</li></ul></div>]]></description><link>https://bjurr.com/ghost-1-0-free-hosting-with-https/</link><guid isPermaLink="false">597b64dc08a2db60d1f648ba</guid><category><![CDATA[Ghost]]></category><category><![CDATA[Blog]]></category><category><![CDATA[cloudflare]]></category><category><![CDATA[buster]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Fri, 28 Jul 2017 16:40:22 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I have been using <a href="https://ghost.org/">Ghost blogging platform</a> for a few years now and I really like it! I have previously written about how I set it up with <a href="https://bjurr.com/ghost-blog-on-github-pages/">GitHub pages and Buster</a>. However a few important things have changed since then:</p>
<ul>
<li>Buster is <a href="https://github.com/axitkhurana/buster/issues/66">no longer maintained</a>.</li>
<li>Google is ranking HTTPS sites higher.</li>
<li>Ghost 1.0 is released!</li>
</ul>
<p>To coop with these new conditions, I made a few changes:</p>
<ul>
<li>I use <a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/">Cloudflare</a> to secure my blog with HTTPS.</li>
<li>I setup Ghost blogging platform on localhost with <a href="https://docs.ghost.org/docs/install">MySQL and NGINX</a>.</li>
<li>I created <a href="https://github.com/tomasbjerre/bjurrcom/blob/tools/commit.sh">a very simple shell script</a> using <code>wget</code> to create a static website out of Ghost running on localhost.</li>
</ul>
<p>This means I can still use Ghost 1.x, for free, with HTTPS, with <a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/">custom domain on GitHub pages</a>!</p>
<p>Checkout <a href="https://github.com/tomasbjerre/bjurrcom">the repo</a> to see exactly how it works. There is a branch, <em>master</em>, where the static content is committed. There is a branch, <em>tools</em>, where the <code>commit.sh</code> is placed and this this is also where the database and content gets backed up on publish. And publish is done by executing the <code>commit.sh</code> script.</p>
<p>Enjoy! This is the first post with that new setup =)</p>
</div>]]></content:encoded></item><item><title><![CDATA[Starta Eget Konsultbolag]]></title><description><![CDATA[<div class="kg-card-markdown"><p>Efter Ã¶ver 7 Ã¥r som anstÃ¤lld konsult (mjukvaruutvecklare) valde jag nyligen att starta eget aktiebolag. Jag gÃ¶r precis samma sak nu som jag gjorde som anstÃ¤lld men numera i mitt eget bolag istÃ¤llet. Det hÃ¤r inlÃ¤gget handlar om hur jag gjorde detta. Googlar man kring att starta eget sÃ¥ hittar</p></div>]]></description><link>https://bjurr.com/starta-eget-konsultbolag/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a8</guid><category><![CDATA[Swedish]]></category><category><![CDATA[aktiebolag]]></category><category><![CDATA[bokfÃ¶ring]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Thu, 29 Jun 2017 10:42:56 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>Efter Ã¶ver 7 Ã¥r som anstÃ¤lld konsult (mjukvaruutvecklare) valde jag nyligen att starta eget aktiebolag. Jag gÃ¶r precis samma sak nu som jag gjorde som anstÃ¤lld men numera i mitt eget bolag istÃ¤llet. Det hÃ¤r inlÃ¤gget handlar om hur jag gjorde detta. Googlar man kring att starta eget sÃ¥ hittar man mycket. Men jag saknade nÃ¥gon som beskriver det utifrÃ¥n mina fÃ¶rutsÃ¤ttningar sÃ¥ det Ã¤r vad jag fÃ¶rsÃ¶ker gÃ¶ra hÃ¤r, eftersom jag tror att mÃ¥nga har samma fÃ¶rutsÃ¤ttningar som mig. <strong>Oh, and sorry if you don't speak Swedish =) The topic is about starting your own company in Sweden, you are probably not interested.</strong></p>
<p>Ska ocksÃ¥ sÃ¤ga att allt jag tagit reda pÃ¥ hÃ¤r Ã¤r genom googling och jag tar inget ansvar fÃ¶r att det jag sÃ¤ger hÃ¤r Ã¤r korrekt och riktigt! SÃ¥ var kritisk nÃ¤r du lÃ¤ser vad jag skriver nedan!</p>
<h1 id="varfrstartaeget">VarfÃ¶r Starta Eget?</h1>
<p>Du kan <strong>skatteplanera</strong>. Om du redan innan Ã¥ret Ã¤r slut vet <a href="http://www.regeringen.se/pressmeddelanden/2017/03/upprakningen-av-skiktgranserna-for-statlig-inkomstskatt-2018-begransas-och-den-sarskilda-inkomstskatten-for-utomlands-bosatta-hojs/">grÃ¤ns fÃ¶r statlig skatt</a> och eventuella avdrag du kommer att gÃ¶ra. DÃ¥ kan du rÃ¤kna ut exakt vilken lÃ¶n du kan betala ut frÃ¥n bolaget fÃ¶r att du som privatperson ska hamna precis pÃ¥ grÃ¤nsen fÃ¶r statlig skatt.</p>
<p>UtÃ¶ver lÃ¶nen kan du ocksÃ¥ gÃ¶ra en <strong>utdelning</strong>. DÃ¥ skattar du 20% pÃ¥ summan upp till <code>2.75</code> gÃ¥nger fÃ¶regÃ¥ende Ã¥rs <em>inkomstbasbeloppet</em> fÃ¶r 2018 blir det <code>2.75 * 59300 = 163075</code>. Denna siffra ska man nog se som ett riktmÃ¤rke, det Ã¤r mer komplicerat Ã¤n sÃ¥ och kommer fÃ¶rmodligen Ã¤ndras snart ocksÃ¥. <a href="https://www.foretagande.se/sa-beraknas-skatt-pa-utdelning-3-12-reglerna/">Den hÃ¤r blog-posten</a> beskriver detta bra.</p>
<p>Jag har <a href="https://docs.google.com/spreadsheets/d/1jfQSSOEINNq3OVc5pYG5NeFkvgcDqOEu1HjzpU2RQm0/edit?usp=sharing">gjort ett excel-ark</a> fÃ¶r att <strong>optimera skatten</strong>. Du kan Ã¤ven lÃ¤sa mer om <a href="https://www.verksamt.se/starta/skatter-och-avgifter/aktiebolag">skatter och avgifter pÃ¥ Verksamt</a>. Se Ã¤ven <a href="http://www.driva-eget.se/kalkyler/lonekalkyl">den hÃ¤r sidan</a> fÃ¶r att fÃ¥ en uppfattning om hur mycket lÃ¶n man kan ta ut.</p>
<p>Det finns anledning att vara rÃ¤dd fÃ¶r det faktum att man inte fÃ¥r nÃ¥gra pengar alls om man inte har ett uppdrag. Men eget bolag kan du anvÃ¤nda en <a href="https://www.skatteverket.se/foretagochorganisationer/foretagare/enskildnaringsverksamhet/periodiseringsfond.4.361dc8c15312eff6fd2b8f2.html">periodiseringsfond</a> dÃ¤r du lÃ¤gger undan pengar mellan rÃ¤kenskapsÃ¥r. Du kan alltsÃ¥ optimera din lÃ¶n fÃ¶r att sippa statlig skatt, lÃ¤gga undan pengar i en periodiseringsfond och sedan betala ut dem ett Ã¥r dÃ¥ du har mindre inkomster. PÃ¥ sÃ¥ vis slipper du bÃ¥de bolagsskatten och statlig inkomstskatt.</p>
<p>Du vÃ¤ljer sjÃ¤lv om du vill betala in till en <strong>tjÃ¤nstepension</strong> och i sÃ¥ fall vilken. Jag har tvingats betala till SEB under en lÃ¤ngre tid. Det enda jag bryr mig om Ã¤r deras fondutbud. I SEB hittade jag bara en fond, <a href="http://web.msse.se/SEB/SGF/quicktake.aspx?six=SEB-BDSEKA">en rÃ¤ntefond</a>, som kÃ¤ndes &quot;ok&quot;. Det Ã¤r Ã¤ven en fÃ¶rdel att du kan maximera lÃ¶nen, gÃ¶ra utdelning och om det efter detta fortfarande finns pengar Ã¶ver kan du anvÃ¤nda dem till tjÃ¤nstepension. Du slipper alltsÃ¥ lÃ¥sa in pengar i en sÃ¥dan pension om det inte Ã¤r sÃ¥ att det Ã¤r en skattemÃ¤ssig fÃ¶rdel. Och det kan du ta stÃ¤llning till efter att rÃ¤kenskapsÃ¥ret Ã¤r slut.</p>
<p>Du <strong>slipper ha lÃ¶n efter Ã¥lder</strong>. Ju yngre du Ã¤r, ju mer tjÃ¤nar du pÃ¥ att ha eget konsultbolag. Den dumma tanken att man ska bÃ¶rja pÃ¥ en lÃ¥g lÃ¶nenivÃ¥ och sedan Ã¶ka ett par procent per Ã¥r mappar inte alls mot vad kunderna betala fÃ¶r dig per timme. Det Ã¤r helt ologiskt. Ãr du yngre anstÃ¤lld konsult sÃ¥ betalar du fÃ¶r dina kollegors lÃ¶n och fÃ¶rmÃ¥ner. Det kan mycket vÃ¤l vara sÃ¥ att du drar in mer pengar Ã¤n nÃ¥gon som Ã¤r 20 Ã¥r Ã¤ldre.</p>
<p>Du kan <strong>kÃ¶pa kontorsmaterial vÃ¤ldigt billigt</strong>. Dator, headset, hÃ¶rlurar, skÃ¤rmar... till ungefÃ¤r halva priset jÃ¤mfÃ¶rt med om du kÃ¶per det privat. DÃ¥ tÃ¤nker jag inte bara pÃ¥ momsen. TÃ¤nk Ã¤ven pÃ¥ hur mycket pengar bolaget behÃ¶ver betala ut fÃ¶r att, efter skatt och arbetsgivaravgift, kunna sÃ¤tta in summan pÃ¥ det privata kontot. SÃ¥klart mÃ¥ste man tÃ¤nka pÃ¥ att det man kÃ¶per Ã¤gs av fÃ¶retaget och inte dig privat.</p>
<p>SÃ¥ fort du har mÃ¶jlighet att betala ut <a href="https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm">skattefritt traktamente</a> sÃ¥ ska du gÃ¶ra det. Du slipper tjafs med en arbetsgivare som nekar dig nÃ¥got som Ã¤r sÃ¥ sjÃ¤lvklart.</p>
<p>Du kan <strong>resa nÃ¤stan vart du vill</strong> och lÃ¥ta bolaget betala. Det finns ju intressanta utvecklarkonferenser nÃ¤stan Ã¶verallt. Vill du Ã¥ka till Sidney sÃ¥ behÃ¶ver du bara hitta en <a href="http://lmgtfy.com/?q=sidney+developer+conference">intressant konferens dÃ¤r</a>. DÃ¥ kan du lÃ¥ta bolaget betala resan dit, hotell under tiden dÃ¥ konferensen varar och resan hem. Innan du resar hem kan du ta en vecka semester =) Inget tjafs med en arbetsgivare som tycker det Ã¤r fÃ¶r dyrt. Inga dryga Ã¶vningar, innan eller pÃ¥ plats, utan bara du som bestÃ¤mmer vilka fÃ¶relÃ¤sningar du tycker Ã¤r intressanta och som du gÃ¥r pÃ¥.</p>
<p>Jag tycker att de flesta mÃ¶ten Ã¤r meningslÃ¶sa och vÃ¤ldigt trÃ¥kiga. Det blir klart fÃ¤rre med eget bolag. Inga mÃ¥nadsmÃ¶ten och inga utvecklingssamtal! =)</p>
<p>Till sist, och kanske det absolut bÃ¤sta argumentet. Jag har <strong>alltid sett mig sjÃ¤lv som mitt eget varumÃ¤rke</strong>. DÃ¥ Ã¤r ju inte steget lÃ¥ngt till att faktiskt vara det ocksÃ¥.</p>
<h1 id="hurstartaeget">Hur Starta Eget?</h1>
<p>Jag listar hÃ¤r kortfattat vad man behÃ¶ver gÃ¶ra. LÃ¤ngre ner finns vissa steg mer utfÃ¶rligt beskrivna. Du kan rÃ¤kna med att det tar 1-2 mÃ¥nader frÃ¥n att du skickar in fÃ¶rsta ansÃ¶kan till att allt runt bolaget Ã¤r klart och du kan bÃ¶rja jobba i det. Skadar inte att titta pÃ¥ <a href="https://www.verksamt.se/alla-e-tjanster/din-checklista/aktiebolag">andra listor ocksÃ¥</a> fÃ¶r att sÃ¤kra att du inte glÃ¶mt nÃ¥got.</p>
<p>Jag valde <strong>aktiebolag</strong> framfÃ¶r enskild firma. DÃ¥ Ã¤r bolaget en juridisk person som ocksÃ¥ har ansvaret. En tydlig grÃ¤ns mellan bolag och privat ekonomi alltsÃ¥. Jag kan rekommendera <a href="https://www.verksamt.se/fundera/valj-foretagsform">Verksamts jÃ¤mfÃ¶relse av fÃ¶retagsformer</a>.</p>
<p><strong>Skapa ansÃ¶kan</strong> pÃ¥ <a href="https://www.verksamt.se/">Verksamt</a>. Du kommer behÃ¶va en verksamhetsbeskrivning. Min ser ut sÃ¥hÃ¤r:</p>
<blockquote>
<p>FÃ¶retaget ska bedriva konsultverksamhet fÃ¶retrÃ¤desvis inom IT, samt utveckla mjukvaruprodukter, Ã¤ga och fÃ¶rvalta vÃ¤rdepapper och utÃ¶va dÃ¤rmed fÃ¶renlig verksamhet.</p>
</blockquote>
<p>NÃ¤r det gÃ¤ller <strong>fÃ¶retagsnamn</strong> sÃ¥ rekommenderar jag att bara ta ditt eget namn. AB eller aktiebolag mÃ¥ste vara med i namnet. SÃ¥ jag valde <em>Tomas Bjerre AB</em>. Risken om du vÃ¤ljer nÃ¥got annat Ã¤r att Bolagsverket nekar dig fÃ¶r att namnet liknar nÃ¥got som redan finns. OnÃ¶digt strul och du kan alltid Ã¤ndra senare.</p>
<p>Du kommer behÃ¶va ange en <strong>SNI-kod</strong>. Jag valde <em>62010</em>.</p>
<p>NÃ¤r du skickat ivÃ¤g ansÃ¶kan till Bolagsverket kommer de invÃ¤nta ett <strong>bankintyg</strong>. LÃ¤s mer om att vÃ¤lja bank nedan. Du behÃ¶ver kontakta en bank fÃ¶r att skapa ett fÃ¶retagskonto. Banken kommer be dig sÃ¤tta in 50 000 kr pÃ¥ ett speciellt konto. Banken behÃ¶ver kunna tala om fÃ¶r Bolagsverket att hÃ¤r finns det 50 000 kr som satts in med avsikt att anvÃ¤ndas fÃ¶r aktiekapitalet. NÃ¤r du gjort detta ger de dig en e-postadress som du sedan ger till Bolagsverket (via verksamt.se). Sedan frÃ¥gan Bolagsverket banken om pengarna Ã¤r dÃ¤r och nÃ¤r banken svarar ja registreras bolaget. SÃ¥ fort bolaget Ã¤r skapat sÃ¥ har du sedan ett fÃ¶retagskonto dÃ¤r det frÃ¥n start finns 50 000 kr.</p>
<p>Jag valde <strong>rÃ¤kenskapsÃ¥ret</strong> som <em>0101 - 1231</em>. Jag kan dock rekommendera brutet rÃ¤kenskapsÃ¥r. AlltsÃ¥ att man vÃ¤ljer ett Ã¥r som inte Ã¤r ett kalenderÃ¥r. FÃ¶rdelen blir dÃ¥ att du kan vÃ¤lja vilket Ã¥r du betalar ut lÃ¶nen pÃ¥, om du nÃ¥r statlig skatt 2017 kan du vÃ¤nta till 2018 med att fortsÃ¤tta betala ut lÃ¶n. Det Ã¤r inte helt enkelt att <a href="https://www.skatteverket.se/download/18.3aa8c78a1466c584587d059/1408515815569/42405.pdf">Ã¤ndra i efterhand</a> och att Ã¤ndra det bara fÃ¶r att undvika skatt Ã¤r inte en godtagbar anledning.</p>
<p>NÃ¤r du startar aktiebolag ska bolaget ha <strong>F-skatt</strong> och du som privatperson har A-skatt. Jag valde <strong>kvartalsmoms</strong>. Som <strong>redovisningsmetod</strong> valde jag <a href="https://www.e-conomic.se/bokforingsprogram/ordlista/kontantmetoden">kontantmetoden</a> (kallas Ã¤ven bokslutsmetoden). Jag uppfattade den som enklast, se hur man <a href="https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi">bokfÃ¶r kÃ¶pt med kreditkort</a> t.ex.</p>
<p>Det Ã¤r vÃ¤ldigt svÃ¥rt att uppskatta den <strong>fÃ¶rvÃ¤ntade vinsten</strong> fÃ¶rsta Ã¥ret. Andra Ã¥ret kommer Skatteverket fÃ¶reslÃ¥ en. Ett tips Ã¤r att ange den lÃ¥gt. I mitt fall skulle jag fÃ¶rst betala in 20 000 kr innan jag hunnit fÃ¥ en enda inkomst i bolaget. Skulle du rÃ¥ka ut fÃ¶r det Ã¤r det bara att gÃ¶ra en ny preliminÃ¤r inkomstdeklaration via Skatteverket och ange en lÃ¤gre fÃ¶rvÃ¤ntad vinst. DÃ¥ fick jag ner denna siffran till 7 000 kr istÃ¤llet.</p>
<p>Det finns mÃ¥nga smidiga <strong>bokfÃ¶ringsprogram</strong>. <a href="https://sv.wikipedia.org/wiki/Redovisning">Redovisningen</a> var nog det jag var mest rÃ¤dd fÃ¶r i bÃ¶rjan. Jag mÃ¤rkte tidigt att nÃ¤r jag googlade om hur man bokfÃ¶r olika saker sÃ¥ kom jag ofta in pÃ¥ <a href="https://forum.vismaspcs.se/visma_spcs">Visma:s support forum</a>. Jag har tidigare anvÃ¤nt deras tidrapportering, PX, vilket suger nÃ¥got helt otroligt. Ser ut som en sommarjobbare hackade ihop det fÃ¶r 15 Ã¥r sedan och att man inte rÃ¶rt det sedan dess. Men Ã¤ven om jag var vÃ¤ldigt skeptisk till detta bolag sÃ¥ valde jag Ã¤ndÃ¥ <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> fÃ¶r bokfÃ¶ring just fÃ¶r att deras support verkar vara helt exemplarisk. Att direkt bokfÃ¶ra ett kvitto i <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> Ã¤r betydligt enklare Ã¤n det jag tidigare gjort via tidrapportering som anstÃ¤lld. Du kanske t.ex. vill bokfÃ¶ra <a href="https://forum.vismaspcs.se/visma_spcs/topics/8fxz374h0czze?topic-reply-list%5Bsettings%5D%5Bfilter_by%5D=all">bokfÃ¶ringsprogrammet</a>, <a href="https://forum.vismaspcs.se/visma_spcs/topics/7h3lv4csqal8w">kÃ¶p av dator och fÃ¶rsÃ¤kring</a> eller <a href="https://forum.vismaspcs.se/visma_spcs/topics/con2lpq5fex2f">kÃ¶p av tÃ¥gbiljett</a>. De <a href="https://www.youtube.com/watch?v=jGgnxd6uBh4">gÃ¶r t.o.m. filmer</a> dÃ¤r de visar vissa flÃ¶den. Hoppas jag Ã¤r trovÃ¤rdig trots att jag gÃ¥tt med i deras affiliate-program och fÃ¥r betalt fÃ¶r att hÃ¤nvisa andra dit =)</p>
<a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">
<p><img src="https://bjurr.com/content/images/2017/07/affiliate-2014-vismaeekonomi1_728x90_eeko.gif" alt="Visma eEkonomi"></p>
</a>
<p>Du lÃ¤r behÃ¶va en <strong>mobil</strong> i bolaget. Som jag fÃ¶rstÃ¥r det Ã¤r det ok att kÃ¶pa telefonen pÃ¥ bolaget. Ãven telefoni och SMS Ã¤r ok. Datatrafiken dÃ¤remot kan behÃ¶va fÃ¶rmÃ¥nsbeskattas. Det i kombination med att man slipper mÃ¥nga dryga samtal om man istÃ¤llet har ett privat abonnemang, gjorde att jag kÃ¶pte den privat.</p>
<p>Du lÃ¤r behÃ¶va en <strong>ansvarsfÃ¶rsÃ¤kring</strong>. Jag valde en <a href="https://www.if.se/web/se/foretag/varaforsakringar/offert/pages/default.aspx?varde=startforsakring">frÃ¥n If</a> och fick betala 5 294 kr. Har du inte det och du rÃ¥kar ut fÃ¶r nÃ¥got, sÃ¤g att nÃ¥gon krÃ¤ver dig pÃ¥ flera miljoner, sÃ¥ konkursar du bara bolaget och slipper undan. Men med en ansvarsfÃ¶rsÃ¤kring sÃ¥ kan du, kanske, gÃ¶ra rÃ¤tt fÃ¶r dig och betala. PÃ¥ sÃ¥ vis blir du en mer attraktiv konsult att anlita och det stÃ¥r Ã¤ven ofta i kontrakten att du ska ha en fÃ¶rsÃ¤kring.</p>
<p>Jag valde att kontakta en <strong>redovisningskonsult</strong> som hjÃ¤lper mig med ekonomiska frÃ¥gor samt tar hand om <strong>bokslut</strong> / <strong>Ã¥rsredovisning</strong> / <strong>deklaration</strong>. Jag tar hand om lÃ¶pande bokfÃ¶ring samt kvartalsmoms, skatter och lÃ¶n. Det kostar cirka 6 000 kr per Ã¥r. En redovisningskonsult kan hjÃ¤lpa dig med allt mÃ¶jligt i bolaget. Vissa ger dem fullmakt sÃ¥ de kan skÃ¶ta all ekonomi. Jag fick tag pÃ¥ honom genom en bekant som tipsade men annars Ã¤r det enkelt att googla. Har du valt Visma sÃ¥ <a href="https://vismaspcs.se/produkter/redovisning/visma-eekonomi-byra">kan de hjÃ¤lpa dig</a>. I <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> kan du Ã¤ven skapa en inloggning till din redovisningskonsult.</p>
<p><strong>Revisor</strong> Ã¤r valfritt om man <a href="http://www.bolagsverket.se/ff/foretagsformer/aktiebolag/starta/revisor">omsÃ¤tter under 3 miljoner</a>. Det anvÃ¤nder jag inte.</p>
<p>Det kan ocksÃ¥ vara bra att ha klart fÃ¶r sig <strong>hur man hittar kunder</strong>. Det finns mÃ¥nga rena konsultmÃ¤klare som tar en procentsats, ofta mellan 10-20% pÃ¥ din timpenning, om du tar ett uppdrag via dem. De har ofta ramavtal med stora konsultkÃ¶pare. Ãr du redan anstÃ¤lld som konsult kanske du i bÃ¶rjan fortsÃ¤tter med samma kund fast som underkonsult istÃ¤llet. Se, t.ex.:</p>
<ul>
<li><a href="http://www.assistera.se/sv">Assistera</a></li>
<li><a href="https://www.brainville.com/">Brainville</a></li>
<li><a href="https://career.cybercom.com/jobs/48753-cybercom-associate-program">Cybercom Associate Program</a></li>
<li><a href="https://www.eworkgroup.com/se/">EWork</a></li>
<li><a href="http://www.kvadrat.se/logga-in-pa-friendweb/">Kvadrat</a></li>
</ul>
<p>Och till sist, du kan gÃ¶ra <a href="http://www.kompred.se/nyttiga-tips/missa-inte-investeraravdraget/">investeraravdraget</a> i din privata deklaration efter att du startat aktiebolag.</p>
<h2 id="bank">Bank</h2>
<p>Jag frÃ¥gade fÃ¶rst nÃ¥gra banker via telefon och mail (ICA, Avanza, Swedbank). Det kÃ¤ndes som att de inte riktigt fÃ¶rstod vad jag menade nÃ¤r jag sa att jag ville ha ett <strong>bankintyg</strong>. Det kÃ¤ndes opÃ¥litligt helt enkelt. Det vÃ¤rsta var nÃ¤r jag gick till Swedbanks kontor och bad om att fÃ¥ intyget.</p>
<p>Jag bÃ¶rjade med att fÃ¶ra Ã¶ver aktiekapitalet till ett av mina konton hos Swedbank.</p>
<p>NÃ¤sta steg var att promenera till nÃ¤rmsta Swedbank-kontor (JÃ¶nkÃ¶ping) fÃ¶r att be om bankintyg att lÃ¤mna till Bolagsverket. Jag berÃ¤ttade att hela kapitalet redan finns pÃ¥ banken och att jag ville ha ett bankintyg. Svaret blev att jag skulle:</p>
<ul>
<li>GÃ¥ till NyfÃ¶retagarcentrum och prata igenom fÃ¶retagsidÃ©n.</li>
<li>LÃ¤mna in en skriftlig affÃ¤rsplan.</li>
<li>LÃ¤mna in en skriftlig budget.</li>
<li>Inom ett par veckor ha ett fysiskt mÃ¶te med Swedbank dÃ¤r vi diskuterar igenom detta.</li>
</ul>
<p>Hur lÃ¥ng tid detta skulle ta innan jag kunde fÃ¥ mitt intyg kunde de inte svara pÃ¥. Obegripligt fÃ¶r mig.</p>
<ul>
<li>Kapitalet hade de ju redan! Jag ville bara att de skulle intyga att det fanns dÃ¤r.</li>
<li>Jag bad inte om nÃ¥got lÃ¥n och har inte heller nÃ¥gra lÃ¥n. Jag har faktiskt ett ypperligt kreditbetyg.</li>
<li>Jag har jobbat som IT-konsult i Ã¶ver 7 Ã¥r och det var ocksÃ¥ precis vad jag skulle gÃ¶ra i bolaget. AlltsÃ¥ inte en unik affÃ¤rsidÃ© alls pÃ¥ nÃ¥got vis. Inget konstigt alls.</li>
<li>Jag kunde, t.o.m., visa att jag hade ett kontrakt frÃ¥n dag 1 och 6 mÃ¥nader framÃ¥t.</li>
</ul>
<p>Jag kÃ¤nner mÃ¥nga som har gjort samma sak som jag ville gÃ¶ra. Efter att ha pratade med nÃ¥gra stycken mÃ¤rkte jag att fler har samma erfarenhet av Swedbank.</p>
<p><strong>VÃ¤lj inte Swedbank!</strong></p>
<p><strong>Jag valde Danskebank</strong>. Du fyller bara i <a href="https://danskebank.se/sv-se/Foretag/Smaforetag/Pages/Product-packages.aspx">deras formulÃ¤r</a> sÃ¥ ringer de upp. Danskebank skÃ¶ter allt per telefon och det fungerar mycket bra. De bad inte om nÃ¥gon affÃ¤rsplan eller budget utan litade pÃ¥ mig direkt. De visste ocksÃ¥ direkt vad det handlade om och de kÃ¤ndes pÃ¥litliga. Eftersom jag inte var kund dÃ¤r sedan tidigare sÃ¥ behÃ¶vde de skicka lite papper till mig med posten fÃ¶rst. Men inom en vecka hade jag intyget! Snabbt, enkelt, smidigt och inget meningslÃ¶st krÃ¥ngel.</p>
<p>Jag valde <em>Danske Business Plus</em> fÃ¶r 99 kr/mÃ¥n. <strong><a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> stÃ¶djer Ã¤ven Danskebank</strong> pÃ¥ sÃ¥ vis att man kan klistra in kontoutdraget frÃ¥n banken in i <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a>, fÃ¶r att automatiskt skapa bankhÃ¤ndelser. Sedan matchar man dem mot leverantÃ¶rsfakturor eller verifikationer.</p>
<h1 id="hurdrivaeget">Hur Driva Eget?</h1>
<p>Jag har lagt in Ã¥terkommande hÃ¤ndelser i Google Calendar fÃ¶r de olika datumen. Sedan angivit att de ska upprepas mÃ¥nadsvis eller, i vissa fall, Ã¥rsvis.</p>
<p>Jag valde <strong>kvartalsmoms</strong>, alltsÃ¥ att jag efter varje kvartal redovisar och betalar in eventuell moms. Mer information om det finns <a href="https://www.verksamt.se/driva/skatter-och-avgifter/moms-redovisa-och-betala">hÃ¤r</a>. SÃ¥ fort kvartalet Ã¤r slut kan man lÃ¤mna in deklarationen. Man har ungefÃ¤r 1.5 mÃ¥nad pÃ¥ sig att lÃ¤mna in den. Ãven fÃ¶r detta har Visma gjort en film som visar <a href="https://www.youtube.com/watch?v=gPv_SahMnEw">hur du gÃ¶r i eEkonomi</a>. Som jag fÃ¶rstÃ¥r det anvÃ¤nder man kontot <em>1630</em> (eller <em>2012</em> om det Ã¤r enskild firma) just fÃ¶r att <a href="https://forum.vismaspcs.se/visma_spcs/topics/maste-man-anvanda-sig-av-skattekontot-1630">alla hÃ¤ndelser mot Skatteverket ska gÃ¥ via detta konto</a>. Hur det fungerar med att betala, och fÃ¥ tillbaka moms, <a href="https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html">beskriver Skatteverkets hÃ¤r</a>. SÃ¥ kortfattat om du har <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> och kvartalsmoms sÃ¥ ska du vid varje kvartalsslut:</p>
<ul>
<li>Skapa en momsredovisning fÃ¶r kvartalet via bokfÃ¶ring / momsredovisning.</li>
<li>Ladda ner <em>eskd</em>-filen.</li>
<li>Skapa en <a href="https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms.4.7459477810df5bccdd480006935.html">momsdeklaration</a> enligt <a href="https://www.youtube.com/watch?v=gPv_SahMnEw">Visma:s video</a>.</li>
<li>Ladda upp <em>eskd</em>-filen hos <a href="https://www.skatteverket.se/foretagochorganisationer/moms/deklareraochbetalamoms/betalaochfatillbakamoms.4.58d555751259e4d66168000354.html">Skatteverket</a>.</li>
<li>Ladda ner <a href="https://www.youtube.com/watch?v=-7cDnn-NaME">transaktioner frÃ¥n Skatteverket till ditt skattekonto</a> och matchar dem sedan mot momshÃ¤ndelsen i dina bokfÃ¶ringshÃ¤ndelser.</li>
<li>NÃ¤r du senare betalat in, eller fÃ¥tt betalt, skapa och bokfÃ¶r bankhÃ¤ndelsen pÃ¥ fÃ¶retagskontot. Det visas i slutet pÃ¥ <a href="https://www.youtube.com/watch?v=gPv_SahMnEw">den hÃ¤r videon</a>. TÃ¤nk pÃ¥ att anvÃ¤nda <em>1630</em> fÃ¶r AB och <em>2012</em> fÃ¶r enskild firma.</li>
</ul>
<p>Skatteverket har skickat brev till dig med datum dÃ¥ du ska betala <strong>debiterad preliminÃ¤rskatt</strong>. Det hÃ¤r Ã¤r nÃ¥got du betalar varje mÃ¥nad och baserar sig pÃ¥ din fÃ¶rvÃ¤ntade vinst som du angav i din preliminÃ¤ra inkomstdeklaration. Du har fÃ¥tt ett besked frÃ¥n Skatteverket dÃ¤r det stÃ¥r datum och hur mycket du ska betala. Om du har <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> kan du fÃ¶lja deras <a href="https://www.youtube.com/watch?v=-7cDnn-NaME">film om skattekontot</a>.</p>
<ul>
<li>Betala frÃ¥n fÃ¶retagskontot till fÃ¶retagets skattekonto.</li>
<li>Importerar bankhÃ¤ndelser frÃ¥n fÃ¶retagskontot.</li>
<li>Ladda ner <a href="https://www.youtube.com/watch?v=-7cDnn-NaME">transaktioner frÃ¥n Skatteverket till ditt skattekonto</a> och matchar dem sedan mot momshÃ¤ndelsen i dina bokfÃ¶ringshÃ¤ndelser.</li>
<li>Importera bankhÃ¤ndelsen frÃ¥n banken till fÃ¶retagskontot i <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a></li>
<li>Importera bankhÃ¤ndelsen frÃ¥n Skatteverket (du kan exportera den till fil) till skattekontot i <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a></li>
<li>Matcha bankhÃ¤ndelsen pÃ¥ fÃ¶retagskontot mot hÃ¤ndelsen pÃ¥ skattekontot. Egen kontering mellan egna bankkonton.</li>
<li>NÃ¤r pengarna dragits av Skatteverket frÃ¥n Skattekontot, importera den hÃ¤ndelsen.</li>
<li>Matcha hÃ¤ndelsen mot bokfÃ¶ringsfÃ¶rslaget <em>Debiterad preliminÃ¤rskatt</em>.</li>
</ul>
<p>NÃ¤r du ska betala ut <strong>LÃ¶n</strong> behÃ¶ver du betala <em>skatt</em>, <em>arbetsgivaravgift</em> samt sjÃ¤lva <em>lÃ¶nen</em>. BÃ¥de <em>skatt</em> och <em>arbetsgivaravgift</em> betalas till fÃ¶retagets <em>skattekonto</em> sÃ¥ det Ã¤r 2 betalningar som behÃ¶ver gÃ¶ras frÃ¥n fÃ¶retagskontot. Om du anvÃ¤nder <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> kan du gÃ¶ra sÃ¥hÃ¤r. Finns Ã¤ven en <a href="https://www.youtube.com/watch?v=ig2C9gQg2Eg">film hÃ¤r</a> och en <a href="https://forum.vismaspcs.se/visma_spcs/topics/bokfora-lon-i-eekonomi">bra trÃ¥d</a> om detta i supportforumet.</p>
<ul>
<li>Under <em>lÃ¶n</em> i huvudnenyn vÃ¤ljer du <em>anstÃ¤llda</em>. LÃ¤gg upp den anstÃ¤llde. Du kommer behÃ¶va <em>Skattetabell</em> att anvÃ¤nda. Den anstÃ¤llde kan <a href="https://www.skatteverket.se/">logga in</a> hos Skatteverket och hittar dÃ¥ skattetabell under &quot;Skatter och deklarationer&quot;.</li>
<li>Under <em>lÃ¶n</em> i huvudnenyn vÃ¤ljer du <em>lÃ¶nebesked</em> och skapar ett nytt.</li>
<li>Ange lÃ¶nen och vÃ¤lj bokfÃ¶r.</li>
<li>Logga in pÃ¥ banken och betala ut lÃ¶nen, efter skatt, till den anstÃ¤lldes konto.</li>
<li>Importera bankhÃ¤ndelsen till <em>fÃ¶retagskontot</em> via <em>kassa och bankhÃ¤ndelser</em>.</li>
<li><a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> kommer fÃ¶reslÃ¥ att du matchar bankhÃ¤ndelsen mot lÃ¶neutbetalningen, gÃ¶r det. Nu Ã¤r du klar med lÃ¶nen, och nÃ¤sta moment Ã¤r att betala skatt och arbetsgivaravgift.</li>
</ul>
<p><strong>Arbetsgivardeklaration</strong> lÃ¤mnas enkelt via <a href="https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html">Skatteverkets webbsida</a>.</p>
<ul>
<li>Om du inte har betalat ut nÃ¥gon lÃ¶n sÃ¤tter du bara <strong>0</strong> i de obligatoriska fÃ¤lten och skickar in.</li>
<li>Om du har betalat ut lÃ¶n, och anvÃ¤nder <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a>.
<ul>
<li>GÃ¥ in under <em>lÃ¶n</em> i huvudmenyn och vÃ¤lj <em>arbetsgivardeklaration</em>.</li>
<li>Skapa ny.</li>
<li>VÃ¤lj mÃ¥naden dÃ¥ lÃ¶nen betaldes ut.</li>
<li>VÃ¤lj <em>bokfÃ¶r</em>.</li>
<li>Nu kan du <a href="https://www.youtube.com/watch?v=ig2C9gQg2Eg">exportera en fil</a> om du klickar pÃ¥ <em>Ã¥tgÃ¤rder</em> fÃ¶r deklarationen.</li>
<li><a href="https://www.skatteverket.se/foretagochorganisationer/arbetsgivare/lamnaarbetsgivardeklaration.4.6a6688231259309ff1f800029116.html">LÃ¤mna in arbetsgivardeklarationen</a> hos Skatteverket genom att importera filen.</li>
<li>PÃ¥ kvittensen visas ett bankgiro och OCR att anvÃ¤nda fÃ¶r att betala in skatten till fÃ¶retagets skattekonto.</li>
<li>Betala in summan frÃ¥n fÃ¶retagets bankkonto.</li>
<li>Importera bankhÃ¤ndelsen frÃ¥n banken till fÃ¶retagskontot i <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a></li>
<li>Importera bankhÃ¤ndelsen frÃ¥n Skatteverket (du kan exportera den till fil) till skattekontot i <a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a></li>
<li>Matcha bankhÃ¤ndelsen pÃ¥ fÃ¶retagskontot mot hÃ¤ndelsen pÃ¥ skattekontot. Egen kontering mellan egna bankkonton.</li>
<li>NÃ¤r pengarna dragits av Skatteverket frÃ¥n Skattekontot, importera den hÃ¤ndelsen.</li>
<li>Matcha hÃ¤ndelsen mot bokfÃ¶ringsfÃ¶rslaget arbetsgivardeklaration. Skatteverkat drar arbetsgivardeklartionen i 2 transaktioner, du behÃ¶ver <a href="https://forum.vismaspcs.se/visma_spcs/topics/hur-matchar-jag-tva-belopp-pa-skattekontot-mot-en-arbetsgivardeklaration">manuellt slÃ¥ ihop dem</a> fÃ¶r att kunna anvÃ¤nda det hÃ¤r bokfÃ¶ringsfÃ¶slaget. Men annars Ã¤r det <em>1630</em> som krediteras och <em>2710</em> (personalskatt) samt <em>2731</em> (arbetsgivaravgift) som debiteras. Jag tycker Ã¤ven <a href="https://www.blinfo.se/foretagskunskap/bokfora-lon__15472">den hÃ¤r sidan</a> Ã¤r bra hÃ¤r.</li>
</ul>
</li>
</ul>
<p><a href="https://vismaspcs.se/produkter/bokforingsprogram/visma-eekonomi?pixid=15282" rel="nofollow">Visma eEkonomi</a> har en fÃ¤rdig mall fÃ¶r <strong>fakturor</strong>. Du anger ditt fÃ¶retags bankgiro, och/eller kontonummer, lÃ¤gger upp kunder och artiklar. Sedan kan du enkelt skapa fakturor som du sedan kan skriva ut, spara som PDF eller maila.</p>
<p>Om du <strong>betalar ut traktamente</strong> behÃ¶ver du kunna bevisa att <a href="https://www.vismaspcs.se/visma-support/visma-eget-aktiebolag/content/skattefria_traktamenten.htm">resorna Ã¤gt rum och varit tjÃ¤nsteresor</a>. DÃ¤rfÃ¶r kan det vara klokt att fÃ¶ra anteckningar fÃ¶r resor. I mitt fall Ã¥ker jag alltid tÃ¥g och kommer hÃ¤nvisa till tÃ¥gbiljetterna om jag fÃ¥r revision av Skatteverket.</p>
<p><strong>TODO: Direktpension <a href="https://vismaspcs.se/ditt-foretagande/driva-eget-foretag/direktpension">https://vismaspcs.se/ditt-foretagande/driva-eget-foretag/direktpension</a></strong></p>
<p>Man hÃ¶r ibland uttrycket <strong>skriva av</strong> och jag tror mÃ¥nga missfÃ¶rstÃ¥r det, kanske Ã¤ven jag =) Men jag tolkar det som att allt man kÃ¶per fÃ¶r under ett halvt prisbasbelopp (ungefÃ¤r 22 000 kr) skrivs av direkt, kostar det mer skriver man av det under flera Ã¥r. Att <em>skriva av</em> innebÃ¤r att man inte tar upp det som en tillgÃ¥ng, en inventarie, i bokfÃ¶ringen. Det Ã¤r dock inte samma sak som att man fÃ¥r ge bort prylen till sig sjÃ¤lv eller nÃ¥gon annan. Men jag Ã¤r osÃ¤ker, <a href="https://www.flashback.org/p49423662">och mÃ¥nga med mig</a>.</p>
<p>Att bokfÃ¶ra kÃ¶p gjorda med <strong>kreditkort</strong> Ã¤r lite speciellt men det har Visma en vÃ¤ldigt <a href="https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi">bra artikel</a> om.</p>
<p>PÃ¥ <strong>bokslutsdagen, sista dagen pÃ¥ rÃ¤kenskapsÃ¥ret, mÃ¥ste <a href="https://www.verksamt.se/driva/ekonomi-och-bokforing/lopande-bokforing">obetalda fakturor tas upp i bokfÃ¶ring</a></strong> Ã¤ven om du anvÃ¤nder kontantmetoden. Det beskriver ocksÃ¥ Visma <a href="https://forum.vismaspcs.se/visma_spcs/topics/bokfora-inkop-med-kreditkort-i-visma-eekonomi">hÃ¤r</a>.</p>
<p>Jag sparar alltid alla <strong>kvitton</strong> direkt pÃ¥ Google Drive. Ãr det inte digitalt fotar jag av med mobilen, laddar upp bilden och sparar Ã¤ven original-kvittot i en pÃ¤rm. I bokfÃ¶ringsprogrammet Ã¤r jag ocksÃ¥ noga med att <strong>ladda upp bilder pÃ¥ varje verifikation</strong>. <a href="https://www.riksdagen.se/sv/dokument-lagar/dokument/svensk-forfattningssamling/bokforingslag-19991078_sfs-1999-1078">BokfÃ¶ringslagen</a> sÃ¤ger att originalen ska sparas, sÃ¥ digitala ska sparas digitalt och de pÃ¥ papper sparas pÃ¥ papper. Jag tycker Ã¤ven att <a href="https://vismaspcs.se/ditt-foretagande/byra/de-har-kopiorna-behover-du-inte-skriva-ut">den hÃ¤r artikeln</a> beskriver det bra. Ãven andra dokument fotar jag av och sparar pÃ¥ Google Drive, som beslut frÃ¥n Skatteverket t.ex. VÃ¤ldigt smidigt att kunna lÃ¤sa allt var man Ã¤n Ã¤r.  Det Ã¤r ganska enkelt att fÃ¥ tag pÃ¥ ett rejÃ¤lt brandskyddat kassaskÃ¥p (<a href="http://www.clasohlson.com/se/Dokumentsk%C3%A5p-Chubbsafes-Executive-40/Pr342428000">#1</a> eller <a href="http://www.biltema.se/sv/Hem/Sakerhet-och-larm/Sakerhetsbox/Kassaskap-brandsakert-2000033385/">#2</a>) sÃ¥ att man kan spara papper korrekt enligt lagstiftningen.</p>
<p>Visma har en vÃ¤ldigt bra <a href="http://download.vismaspcs.se/pdf/bokf%C3%B6ring-f%C3%B6r-nyb%C3%B6rjare.pdf?utm_source=Eloqua&amp;utm_medium=email&amp;utm_content=SE_SP_SI_Onboarding-eEko-Std-4&amp;utm_campaign=SE_SP_SI_Onboarding-eA-Std-1704">gratis broschyr om bokfÃ¶ring</a>.</p>
<h1 id="vrigt">Ãvrigt</h1>
<p>Om du <strong>veckopendlar</strong> som jag sÃ¥ kanske du har en <strong>lÃ¤genhet pÃ¥ arbetsorten</strong>. DÃ¥ kan man tÃ¤nka sig att man <a href="http://www.skatter.se/?q=node/2619">lÃ¥ter bolaget betala den</a>. Jag blev rekommenderad att ta den privat och betala ut mer lÃ¶n frÃ¥n bolaget istÃ¤llet. DÃ¥ rÃ¤knar jag pÃ¥ detta vid utbetalning av lÃ¶n sÃ¥ att lÃ¶n efter avdrag hamnar pÃ¥ grÃ¤nsen fÃ¶r statlig skatt. Avdraget gÃ¶r jag alltsÃ¥ i min privata deklaration. VÃ¤ljer man att lÃ¥ta bolaget direkt betala lÃ¤genheten blir det lite krÃ¥ngligare med bokfÃ¶ring och deklaration. Det kan ocksÃ¥ vara sÃ¥ att Skatteverket ser det som en fÃ¶rmÃ¥n. SÃ¥ det hÃ¤r kÃ¤ndes enklast.</p>
<p>Det finns bolag som har som <strong>affÃ¤rsidÃ© att bara ha underkonsulter</strong>. De Ã¥ker pÃ¥ konferensresor och har gemensam kontorslokal precis som vilket annat bolag som helst. Skillnaden Ã¤r bara att alla Ã¤r underkonsulter. Detta bolag hjÃ¤lper dig att starta ditt eget bolag och hitta kunder. De har ramavtal med stora konsultkÃ¶pare och kan ordna bra timpriser. Ett sÃ¥nt bolag Ã¤r <a href="http://www.kvadrat.se/">Kvadrat</a>. Jag kÃ¤nner nÃ¥gra stycken som jobbar dÃ¤r och de Ã¤r alla nÃ¶jda. Jag valde dock att starta helt pÃ¥ egen hand.</p>
<p>Har du frÃ¥gor om skatter sÃ¥ Ã¤r det smidigt att man kan <a href="https://www.skatteverket.se/omoss/kontaktaoss/mejla/">maila Skatteverket</a>.</p>
</div>]]></content:encoded></item><item><title><![CDATA[Java Code Formatting With Google Java Format]]></title><description><![CDATA[<div class="kg-card-markdown"><p>Most projects, that I work with nowadays, have a defined code standard that includes how the code should be formatted. That is great and improves code quality a lot... if followed!</p>
<p>A single person, in the project, can lower the quality significantly by not formatting the code correctly. If such</p></div>]]></description><link>https://bjurr.com/java-code-formatting-with-google-java-format/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a7</guid><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sun, 11 Jun 2017 20:47:00 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>Most projects, that I work with nowadays, have a defined code standard that includes how the code should be formatted. That is great and improves code quality a lot... if followed!</p>
<p>A single person, in the project, can lower the quality significantly by not formatting the code correctly. If such code is not blocked, from making it into shared branches, you will have the choice of keeping it or fixing it. This is a problem that I find incredibly annoying!</p>
<ul>
<li><em>Keeping it</em> means you have to live with faulty formatted code. If some developers use something like <em>save actions</em> in Eclipse then they will have a hard time keeping the lines unchanged when working on the file.</li>
<li><em>Re-formatting it</em> in a new commit makes it harder to maintain the project because things like <code>git blame</code> will show the re-format commit, not the original feature commit.</li>
</ul>
<p>The most common solution to this, among the clients I've been working with, is to use a code style defined in Eclipse. Along with <em>save actions</em>. The code style is imported to Eclipse from an XML-file and some clients also use <a href="http://marketplace.eclipse.org/content/workspace-mechanic">Workspace Mechanics</a> to setup <em>save actions</em> properly.</p>
<p>Defining the code style in Eclipse is a very bad idea:</p>
<ul>
<li>All people are not productive in Eclipse, some might for example be using InteliJ. They will have to have Eclipse installed just to use it for formatting.</li>
<li>The semantics of the settings in the code style may change between versions of Eclipse (I have seen it!). Then you may start getting unnecessary diffs in commits after an upgrade.</li>
<li>There is no way, as far as I know, to verify Eclipse-formatting as a step in a continuous integration flow. While it is easy for a reviewer to see that brackets are incorrectly positioned, other things may not be as obvious.</li>
</ul>
<h1 id="googlejavaformat">Google Java Format</h1>
<p>I sincerely do not care how the code is formatted when I come to a new client. Tabs or spaces, brackets on same or new line... it does not matter. What matters is that you agree on something, anything!, and follow it. That is why, if it is my decision, I choose <a href="https://github.com/google/google-java-format">Google Java Format</a>.</p>
<p>There is <a href="https://github.com/google/google-java-format">the library</a> and also plugins for Maven and Gradle. This means the code style, and the tool support for that, is completely separate from any IDE used. You can let the developers use whatever IDE they want. The important thing is what they produce, the code, which should have no references to any IDE.</p>
<p>I use these in different projects:</p>
<ul>
<li><a href="https://github.com/coveo/fmt-maven-plugin">FMT Maven Plugin</a>. You just need to add it to the <code>pom.xml</code> and it will format the code at compile time. It includes a <a href="https://github.com/coveo/fmt-maven-plugin/blob/master/src/main/java/com/coveo/FMT.java#L62">validate</a> attribute that can be used in continuous integration, perhaps with a build property, to validate that the code is formatted correctly.</li>
<li><a href="https://github.com/revelc/formatter-maven-plugin">Formatter Maven Plugin</a>. You just need to add it to the <code>pom.xml</code> and it will format the code at compile time. It includes a <a href="http://code.revelc.net/formatter-maven-plugin/formatter-maven-plugin/plugin-info.html">validate</a> goal that can be used in continuous integration to validate that the code is formatted correctly.</li>
<li><a href="https://github.com/sherter/google-java-format-gradle-plugin">Google Java Format Gradle Plugin</a>. You just need to add it to the <code>build.gradle</code> and it can format the code at compile time with something like <code>compileJava.dependsOn 'googleJavaFormat'</code>. It adds a <code>verifyGoogleJavaFormat</code> task to be used in continuous integration to verify formatting.</li>
</ul>
<p>A common problem when auto formatting coding is with newlines. I use <em>phantom comments</em> to deal with that. Just add <code>//</code> at the end of the line, like <a href="https://github.com/tomasbjerre/violations-lib/blob/master/src/main/java/se/bjurr/violations/lib/parsers/CheckStyleParser.java">this</a>, to force the formatter to keep it that way.</p>
</div>]]></content:encoded></item><item><title><![CDATA[Continuous Integration with GitLab and Jenkins]]></title><description><![CDATA[<div class="kg-card-markdown"><p>My client recently started using GitLab. I did not find the plugins needed to properly verify merge requests. Here is what I wanted to do:</p>
<ul>
<li>Trigger on merge requests events.</li>
<li>Merge, compile, test and run static code analysis on it.</li>
<li>Report static code analysis results to GitLab.</li>
</ul>
<p>When fiddling with</p></div>]]></description><link>https://bjurr.com/continuous-integration-with-gitlab-and-jenkins/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a6</guid><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sun, 12 Mar 2017 22:01:49 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>My client recently started using GitLab. I did not find the plugins needed to properly verify merge requests. Here is what I wanted to do:</p>
<ul>
<li>Trigger on merge requests events.</li>
<li>Merge, compile, test and run static code analysis on it.</li>
<li>Report static code analysis results to GitLab.</li>
</ul>
<p>When fiddling with this I came up with a Job DSL solution and a pipeline solution. Here is how they work.</p>
<h1 id="jobdslapproach">Job DSL approach</h1>
<p>I developed a couple of Jenkins Plugins to do this.</p>
<ul>
<li><a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin">Generic Webhook Trigger Jenkins Plugin</a></li>
<li><a href="https://github.com/jenkinsci/violation-comments-to-gitlab-plugin">Violation Comments To GitLab Jenkins Plugin</a></li>
</ul>
<p>I also use the <a href="https://wiki.jenkins-ci.org/display/JENKINS/HTTP+Request+Plugin">HTTP Request Plugin</a> and <a href="https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin">Conditional BuildStep Plugin</a>.</p>
<p>Here is what you need to do to use this workflow.</p>
<p>In Jenkins:</p>
<ol>
<li>Install the plugins.</li>
<li>Use the job DSL to create the job. The DSL is <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin">in the wiki</a> and <a href="https://github.com/jenkinsci/violation-comments-to-gitlab-plugin">in the repo</a>.</li>
</ol>
<p>In GitLab:</p>
<ol>
<li>Create a API token. You will find it at <code>/profile/personal_access_tokens</code></li>
<li>Add a webhook. You will find it at <code>/root/violations-test/settings/integrations</code>. Point it at <code>http://user:password@jenkins:8080/generic-webhook-trigger/invoke</code>.</li>
<li>Make sure you are authenticated, in this request, with a user that can view any jobs that should be triggered.</li>
</ol>
<p>The <a href="https://gitlab.com/tomas.bjerre85/violations-test/merge_requests/1">GitLab merge request</a> will then be commented like this:<br>
<img src="https://bjurr.com/content/images/2017/03/mergerequest-onecomment-1.png" alt="alt"></p>
<h1 id="pipelineapproach">Pipeline approach</h1>
<p>I just use curl, <a href="https://github.com/jenkinsci/gitlab-plugin">GitLab plugin</a> and <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin">Violation Comments to GitLab Plugin</a> to implement it.</p>
<p><img src="https://bjurr.com/content/images/2017/04/violation-pipeline.PNG" alt="Violation Comments to GitLab pipeline"><br>
Here is what you need to do to use this workflow.</p>
<p>In Jenkins:</p>
<ol>
<li>Install the plugins.</li>
<li>Create a pipeline job. The pipeline script is <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+GitLab+Plugin">in the wiki</a> and <a href="https://github.com/jenkinsci/violation-comments-to-gitlab-plugin">in the repo</a>.</li>
</ol>
<p>In GitLab:</p>
<ol>
<li>Create a API token. You will find it at <code>/profile/personal_access_tokens</code></li>
<li>Add a webhook. You will find it at <code>/root/violations-test/settings/integrations</code>.</li>
</ol>
</div>]]></content:encoded></item><item><title><![CDATA[GitFlow and when you should use it]]></title><description><![CDATA[<div class="kg-card-markdown"><p>There are a lot of people explaining <a href="http://nvie.com/posts/a-successful-git-branching-model/">GitFlow</a> in different blog posts and videos. I could not find one that, using the correct arguments, explained when it should, and should not, be used. I would say its a very simple choice. These are my personal opinions and you don't have</p></div>]]></description><link>https://bjurr.com/gitflow-and-when-you-should-use-it/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a5</guid><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sat, 25 Feb 2017 04:56:31 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>There are a lot of people explaining <a href="http://nvie.com/posts/a-successful-git-branching-model/">GitFlow</a> in different blog posts and videos. I could not find one that, using the correct arguments, explained when it should, and should not, be used. I would say its a very simple choice. These are my personal opinions and you don't have to agree =)</p>
<p><em>GitFlow</em> is really the simplest thing. People saying that its over-engineered are using it wrong. People that are moving away from it should probably not have used it in the first place. If you don't feel that its simple, then its not the right pick for you.</p>
<p><strong>If you don't have a code freeze, then <em>GitFlow</em> is not for you!</strong> Let's divide the people working with the project into <strong>developers</strong> and <strong>configuration manager(s)</strong> and look at what they do.</p>
<h1 id="gitflowasadeveloper">GitFlow as a developer</h1>
<p>As a <strong>developer</strong> you have 2 kinds of branches.</p>
<ul>
<li><strong>develop</strong> Integration branch. Refers to the <em>next release</em>.</li>
<li><strong>feature/X</strong> Feature branch where feature <em>X</em> is developed.</li>
</ul>
<p>You may have <strong>feature</strong> branches that branch out of other <strong>feature</strong> branches. In order to, easily, collaborate with other developers on a feature.</p>
<ul>
<li>You should always merge code to <strong>develop</strong> as fast as you can. To avoid merge conflicts.</li>
<li>You should regularly <em>rebase</em> or <em>merge</em> <strong>develop</strong> into you branch. To avoid merge conflicts and benefit from new improvements like refactorings.</li>
</ul>
<p>To work on the next release. You branch out of <strong>develop</strong>, work with the <strong>feature</strong>, merge back to <strong>develop</strong>.</p>
<pre><code>*    (develop)  Merge branch 'feature/work-with-correcting-a' into develop 
|\  
| *  (feature/work-with-correcting-a) Correcting a
|/  
*     Merge branch 'feature/work-with-a' into develop 
|\  
| *  (feature/work-with-a)  a 
|/  
* 
</code></pre>
<p>To work on the <em>next</em>-<em>next</em> release, or even further into the future, simply don't merge it back to <strong>develop</strong> before <em>next</em>-<em>next</em> is <em>next</em>. And keep in mind, it may be a good idea to merge it into <strong>develop</strong> earlier, to avoid merge conflicts, if you can do feature toggling.</p>
<p>As a <strong>developer</strong>, this is all there is to it! This is how <strong>developers</strong> most often prefer to work. Just look at any open source repository. Most often you fork the main repository and the <strong>master</strong> in your fork is your <strong>feature</strong> branch. But still, <strong>this is as simple as it can get and this is how developers do it!</strong></p>
<p>And again, if you don't have a <strong>code freeze</strong> then don't use <em>GitFlow</em>. You will most likely not have <strong>develop</strong>-branch but instead just <strong>master</strong>. And you will also most likely do releases directly from <strong>master</strong>.</p>
<h1 id="gitflowasaconfigurationmanager">GitFlow as a configuration manager</h1>
<p>As a <strong>configuration manager</strong> you have 2 kinds of branches.</p>
<ul>
<li><strong>master</strong> This is the what's in <strong>production</strong>.</li>
<li><strong>release-X</strong> This is what's included in <strong>release</strong> <em>X</em>.</li>
</ul>
<p>As soon as it's <em>code freeze</em> it's time to create the first <em>release candidate</em>. That is done by branching out of <strong>develop</strong> into <strong>release-X</strong>. The version of <strong>develop</strong> is now set to 1.1, in Java that would mean changing the version to <em>1.1-SNAPSHOT</em> while in the release branch its still <em>1.0-SNAPSHOT</em>. The semantics of the versions is a side track, but I can recommend <a href="http://kylelieber.com/2012/06/maven-versioning-strategy/">this blog post</a>.</p>
<pre><code>| *  (release-1, tag: 1.0-RC-1) Releasing RC 1
| *  Setting version to 1.0-RC1
* | (develop) Setting version to 1.1-SNAPSHOT
|/
</code></pre>
<p>The release candidate, <em>RC1</em>, is deployed and tested and if it's all good then it's released. But there is probably something that needs to be fixed. It can be done in different ways.</p>
<ul>
<li>With <em>cherry-picking</em> from <em>develop</em>.</li>
</ul>
<p>This is the prettiest but it may also not be possible. Merge conflicts may hinder this. There is also a risk that the <strong>develop</strong>-branch is too far ahead making it hard to know if the fix will work once it's in the <strong>release</strong>-branch. But I feel that it gives the <strong>configuration manager</strong> the most control of the release process.</p>
<ul>
<li>With merging a <strong>feature</strong>-branch that branches out of the <strong>release</strong>-branch.</li>
</ul>
<p>This often my preferred choice in large teams. It gives the <strong>configuration manager</strong> control of what's included in the release. It avoids risk of merge conflicts. The tests done on that <strong>feature</strong>-branch can be trusted. It can be done with pull requests.</p>
<ul>
<li>With direct commits to the <strong>release</strong>-branch.</li>
</ul>
<p>This may fit a technical team where the <strong>configuration manager</strong> is also a <strong>developer</strong>. It provides a release process for the current release and enables the <strong>developer</strong> to work on the next release in <strong>develop</strong>. It lacks support for code review but you may not need that in a small project.</p>
<p>Here is what it may look like if <em>cherry-picking</em> is used.</p>
<pre><code>| *  Setting version to 1.0-SNAPSHOT
| *  (release-1, tag: 1.0-RC-2) Releasing RC 2
| *  Setting version to 1.0-RC2
| *  Correcting a
| *  Setting version to 1.0-SNAPSHOT
| *  (tag: 1.0-RC-1) Releasing RC 1
| *  Setting version to 1.0-RC1
* | (develop) Setting version to 1.1-SNAPSHOT
|/
</code></pre>
<p>Now if <em>RC2</em> is good and should be released then that exact artifact is deployed in production.</p>
<ul>
<li><strong>release-1</strong> is merged into <strong>master</strong> to keep track of whats in production.</li>
<li><strong>master</strong> is merged into <strong>develop</strong> to make sure any changes made in production are also in the next release.</li>
</ul>
<h1 id="conclusions">Conclusions</h1>
<p>I've shown the two roles in <em>GitFlow</em> and I hope I made it obvious that its actually a very simple workflow! It will not fit all projects. A tiny library that is just used by other software will probably not gain from using <em>GitFlow</em>. A big application, where a release is the same as a production deployment, will probably gain from using <em>GitFlow</em>.</p>
</div>]]></content:encoded></item><item><title><![CDATA[Continuous Integration with Bitbucket Server and Jenkins]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I have started several projects where I develop plugins for Bitbucket Server and Jenkins. They are independent of each other but I thought it would be nice to have a blog post about how they can work together and on how I prefer to do continuous integration. This is it!</p></div>]]></description><link>https://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a4</guid><category><![CDATA[Jenkins]]></category><category><![CDATA[GitHub]]></category><category><![CDATA[Bitbucket Server]]></category><category><![CDATA[Static Code Analysis]]></category><category><![CDATA[Git]]></category><category><![CDATA[Plugins]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sat, 10 Sep 2016 08:07:34 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I have started several projects where I develop plugins for Bitbucket Server and Jenkins. They are independent of each other but I thought it would be nice to have a blog post about how they can work together and on how I prefer to do continuous integration. This is it! =)</p>
<p>What is the configuration that I apply?</p>
<ul>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow">Gitflow</a> workflow.</li>
<li>Every commit, message and code, has to be reviewed before it can be merged.</li>
<li>Every commit has to have an issue in its message.</li>
<li>The size of the files that are put under version control cannot exceed 2000kb.</li>
<li>The committer must use valid name and email in all commits.</li>
<li>Changes can only be made with <em>feature branches</em> and merged with <em>pull requests</em>.</li>
<li><em>Pull requests</em> cannot be merged unless it its guaranteed that the target branch will still build after merge.</li>
<li><em>Pull requests</em> cannot be merged unless, at least, one other developer has reviewed it.</li>
<li><em>Static code analysis</em> will be made on every <em>pull request</em>.</li>
</ul>
<p>Why do I apply this configuration?</p>
<ul>
<li><strong>Git flow enables you to</strong></li>
<li>Use plugins for managing releases, like <a href="https://bitbucket.org/atlassian/jgit-flow/wiki/Home">JGit-Flow</a>.</li>
<li>Reduce time spent on documentation. You just need to refer to some <a href="https://www.youtube.com/results?search_query=git+flow">youtube-videos</a> or <a href="http://lmgtfy.com/?q=git+flow">websites</a>.</li>
<li>Discuss any scenario on any public forum like <a href="http://stackoverflow.com/search?q=git+flow">Stackoverflow</a>.</li>
<li>Let a configuration manager have total control of <em>master</em> and <em>release</em>-branches. While developers have total control of <em>dev</em> and <em>feature</em>-branches.</li>
<li>Some people skip <em>dev</em> and use <em>master</em> as developer branch. I keep <em>dev</em> because when developing tools around GIT, its convenient to have a reference to latest release, <em>master</em>, and latest snapshot, <em>dev</em>. And since branches in git are basically just a file with a hash I think its a small price to pay for keeping it nice and tidy.</li>
<li><strong>You will know exactly what is included in your releases</strong>. The commits are reviewed, so you can trust that the message is true. Which means you can create your release notes by looking at the new commits in <em>dev</em> that are not yet merged to <em>master</em> (production). A special QA-jira is created to use for small fixes, like correcting toggling test case or formatting code.</li>
<li><strong>You will make the code more maintainable and share knowledge among developers</strong>. When tracking down a bug, the commit messages you find will be clear and understandable. Also the code will be cleaner from the reviews. Duplicated utility classes, diverging patterns... and so on will be denied.</li>
<li><strong>You will never have a failing build on a shared branch</strong>. Merge is only allowed, blocked by the Bitbucket Server, if it is guaranteed that target will still build after merge. Actually, if you have toggling test cases they can fail. But that should be found in code reviews.</li>
<li><strong>Testers can pick a feature and try it out in a test environment before its merged to <em>dev</em></strong>. By letting <em>Jenkins</em> perform the merge (without pushing), build the artifacts and deploy to an environment.</li>
<li><strong>Your static code analysis will be honored</strong>. You will see dramatically reduced amount of warnings from static code analysis. The developers will not be able to ignore such warnings (often the case with <em>Sonar</em>) as they will automatically be converted into comments on the code in the <em>pull request</em>.</li>
<li><strong>Your repository will not quickly increase in size</strong>. Remember that when you clone a Git repo you will download every version of everything. Its mostly a one time thing for a developer but something that a build server does several times a day. Once your repo has grown big its a bit of a pain getting rid of those large files.</li>
</ul>
<p>And finally, how do I apply the configuration? With Jenkins, Bitbucket Server (some of this is also possible to do if you are using GitHub) and plugins! I created a small <a href="https://github.com/tomasbjerre/jenkinsbitbucket">Docker Compose</a> to help fiddle with this.</p>
<h1 id="bitbucketserver">Bitbucket Server</h1>
<p>This is the Git repo that I use. It adds some things that Git does not have:</p>
<ul>
<li>Authentication.</li>
<li>Branch, repo and project permissions.</li>
<li>Pull request support.</li>
<li>Code review support.</li>
<li>Alot of plugins.</li>
</ul>
<p>The plugins I will use adds support for:</p>
<ul>
<li>Commit checks with <a href="https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview">Simple Bitbucket Server Commit Checker</a>.</li>
<li>Notifies Jenkins to perform verification of pull requests with <a href="https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview">Pull Request Notifier for Bitbucket Server</a>.</li>
<li>Synchronizing settings among repositories with <a href="https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview">Settings Synchronizer for Bitbucket Server</a></li>
</ul>
<p>You can think about Git as an open database. Anyone can change anything. Anyone can add commits to any branch, with any author/committer name/email. It is very dangerous to collaborate around a repo that is not protected with a service like Bitbucket Server.</p>
<h2 id="simplebitbucketservercommitchecker">Simple Bitbucket Server Commit Checker</h2>
<p>This is one of my plugins. Its available for easy install from <a href="https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc/server/overview">Atlassian Marketplace</a> and is developed <a href="https://github.com/tomasbjerre/simple-bitbucket-commit-checker">on Github</a>.</p>
<p>The main reason why I developed this plugin was to allow custom rejection messages. The rejection messages also allows you to use variables so that you can reject a commit with a message saying exactly what the committer needs to do in order to fixup the commit. It also has a <em>dry run</em> mode where it only complains about the things that are not correct, but does not actually block the commit. It may be crucial to have such a feature if you introduce commit checks for 100+ committers.</p>
<p><img src="https://bjurr.com/content/images/2016/09/sscc-email.png" alt="Block committer emails not in Bitbucket Server"></p>
<p>The rejection messages are very clear.</p>
<p><img src="https://bjurr.com/content/images/2016/09/sscc-reject.png" alt="Email rejected"></p>
<p>It uses Jira:s <a href="https://confluence.atlassian.com/jirasoftwarecloud/advanced-searching-764478330.html#Advancedsearching-ConstructingJQLqueries">JQL</a> to enable advanced and flexible validation of commit comments. It does not have to be an advanced query, simply adding <code>issue = ${REGEXP}</code> will validate that the Jiras exists.</p>
<p><img src="https://bjurr.com/content/images/2016/09/sscc-issues.png" alt="JQL"></p>
<p>I use it to block commits:</p>
<ul>
<li>Contains files that are too big, larger then 2000kb.</li>
<li>Committer email or name does not match authenticated user in Bitbucket Server.</li>
<li>Message does not contain an issue. Jira or custom incident pattern. I create a special issue in jira, a QA-jira, that can be use for small fixes. A small fix might be correcting toggling test case or formatting code.</li>
</ul>
<h2 id="pullrequestnotifierforbitbucketserver">Pull Request Notifier for Bitbucket Server</h2>
<p>This is one of my plugins. Its available for easy install from <a href="https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash/server/overview">Atlassian Marketplace</a> and is developed <a href="https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket">on Github</a>.</p>
<p>It invokes a URL when a pull request event happens in Bitbucket Server. The URL is completely customizable and supports variables so that you can notify any system with the information it needs on the format it needs it.</p>
<p><img src="https://bjurr.com/content/images/2016/09/pull-request-notifier-url-config.png" alt="Pull Request Notifier for Bitbucket Server URL config"></p>
<p>The main reason why I developed this plugin was to allow perfect verification of pull requests in Jenkins. But it is written in a way so that it is in no way limited to Jenkins. It basically just interacts with HTTP and can be used for many other purposes. I know people use it for posting updates regarding pull requests in Slack channels.</p>
<p>It enables you to guarantee that pull requests cannot be merged unless target branch will still build after the merge. If one of several pull requests to <em>dev</em> is merged, the plugin can re-trigger all other pull requests to verify them with the new commit that is now <em>dev</em>.</p>
<p>It adds support for <em>custom buttons</em> on pull request view. These buttons are mapped to a <em>notifications</em> (a URL being invoked). This means you can have a button labeled &quot;<em>Deploy to test env 1</em>&quot; and when it is pressed you trigger a job in Jenkins. The job is served with the feature branch of the pull request, builds the artifact and deploys it to that environment.</p>
<p><img src="https://bjurr.com/content/images/2016/09/prnfb-buttons.png" alt="Pull Request Notifier for Bitbucket Server Button Config"></p>
<p>And in the pull request view you will see that button to the right, when clicking the dots.</p>
<p><img src="https://bjurr.com/content/images/2016/09/prnfb-button-pr-view.png" alt="Pull Request Notifier for Bitbucket Server Button In PR view"></p>
<p>The button will only be made visible if there is a configured notification that will actually trigger on the button being pressed. So make sure you add that also.</p>
<p><img src="https://bjurr.com/content/images/2016/09/prnfb-triggers.png" alt="Pull Request Notifier for Bitucket Server Triggers"></p>
<h2 id="settingssynchronizerforbitbucketserver">Settings Synchronizer for Bitbucket Server</h2>
<p>This is one of my plugins. Its available for easy install from <a href="https://marketplace.atlassian.com/plugins/se.bjurr.ssfb.settings-synchronizer-for-bitbucket/server/overview">Atlassian Marketplace</a> and is developed <a href="https://github.com/tomasbjerre/settings-synchronizer-for-bitbucket-plugin">on Github</a>.</p>
<p>It is a bit of a pain to configure plugins for a 100, or even just a couple, of repositories. This plugin lets you synchronize plugin settings among your repositories.</p>
<p><img src="https://bjurr.com/content/images/2016/10/repoadmin.png" alt="Settings Synchronizer for Bitbucket Server"></p>
<h1 id="jenkins">Jenkins</h1>
<p>The build server that I use. Some say its just a glorified cron job. And yes thats pretty much it. The good thing about it is all the plugins. I dont think I would ever use it if it was not for the plugins.</p>
<p>When I verify the pull requests I do it with a simple shell script build step.</p>
<ul>
<li>From <a href="https://github.com/tomasbjerre/pull-request-notifier-for-bitbucket">Pull Request Notifier for Bitbucket Server</a> I pass the <code>${EVERYTHING_URL}</code>.</li>
<li>I check the job as parameterized and add the variables, used below, ass parameters.</li>
<li>I check delay and set it to 0 seconds.</li>
<li>I check allow parallel jobs.</li>
</ul>
<p>The script is something like this.</p>
<pre><code>git clone $PULL_REQUEST_TO_HTTP_CLONE_URL
cd *  
git reset --hard $PULL_REQUEST_TO_HASH
git status  
git remote add from $PULL_REQUEST_FROM_HTTP_CLONE_URL
git fetch --all
git merge $PULL_REQUEST_FROM_HASH
git --no-pager log --max-count=10 --graph --abbrev-commit

#compile command here ...
</code></pre>
<h2 id="violationcommentstobitbucketserverplugin">Violation Comments to Bitbucket Server Plugin</h2>
<p>This is one of my Jenkins plugins. It is available in <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin">Jenkins update sites</a> and is developed <a href="https://github.com/jenkinsci/violation-comments-to-stash-plugin">on Github</a>. There is also a <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Github+Plugin">Jenkins plugin for Github</a> if that is what you are using.</p>
<p>My opinion is that projects often put to much trust in that developers themselves will adhere to rules specified by static code analysis tools. They often trust that developers will have their IDE setup correctly to report problems. They also trust that developers will browse to <a href="http://www.sonarqube.org/">SonarQube</a>, every now and then, and find problems to fix. It is my strongest opinion that this never works. Some developers are really enthusiastic about it in the beginning but soon forgets to check for problems. Some never even cares in the first place. Commenting the pull requests with the problems found, makes them hard to ignore.</p>
<p>When a pull request is verified, part of the verification is static code analysis. This plugin finds report files generated from that analysis and uses them to comment the pull request in Bitbucket Server.</p>
<p><img src="https://bjurr.com/content/images/2016/09/screenshot-stash.png" alt="Violation Comments to Bitbucket Server"></p>
<p>The post build action may look something like this.</p>
<p><img src="https://bjurr.com/content/images/2016/09/violation-comments-to-bitbucket.png" alt="Violation Comments to Bitbucket Server Post Build Action"></p>
<h2 id="gitchangelogplugin">Git Changelog Plugin</h2>
<p>This is one of my Jenkins plugins. It is available in <a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Changelog+Plugin">Jenkins update sites</a> and is developed <a href="https://github.com/jenkinsci/git-changelog-plugin">on Github</a>.</p>
<p>There may be several commits in the feature branch that is the source of the pull request. It may be an integration branch where developers has been working for weeks or even months. Then its very nice get a more organized view of what the feature branch actually contains.</p>
<p><img src="https://bjurr.com/content/images/2016/09/git-changelog-postaction1.png" alt="Git Changelog Jenkins Plugin Configuration"></p>
<p>This plugin is configured with a template and then creates a changelog where the template is rendered with the content of the feature branch.</p>
<p><img src="https://bjurr.com/content/images/2016/09/git-changelog-postaction2.png" alt="Git Changelog Jenkins Plugin Template Configuration"></p>
<p>It may look something like this if you chose to publish it on Jenkins job summary page. I used a Github repo here in the example because I dont have access to a Jira installation, but it works just the same with Jira! =)</p>
<p><img src="https://bjurr.com/content/images/2016/09/gitchangelog-prnfb-github.png" alt="Git Changelog Jenkins Summary"></p>
<p>You can also use this plugin to create release notes, just select <em>dev</em> as source branch and <em>master</em> as target branch. If you have a Jenkins job for <em>dev</em> then that is where to put that. It includes <strong>integration with MediaWiki</strong> so that releasenotes can be posted there. You can also chose to <strong>create a file</strong> where you are totally free to create a formatted HTML with CSS, or just plain text, the way you like it.</p>
<h2 id="stashnotifierplugin">Stash Notifier Plugin</h2>
<p>It is available in <a href="https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin">Jenkins update sites</a>. It adds a post build step in Jenkns.</p>
<p><img src="https://bjurr.com/content/images/2016/09/stash-notifier-plugin.png" alt="Post Build Step in Jenkins"></p>
<p>It also reveals build status on Pull request view in Bitbucket Server.</p>
<p><img src="https://bjurr.com/content/images/2016/09/stash-notifier-in-bitbucket.png" alt="Build status in Bitbucket Server"></p>
<h1 id="conclusions">Conclusions</h1>
<p>Hope you found something useful here. Pull requests and suggested features are always welcome. Please dont email me directly but instead try to file issues on GitHub!</p>
</div>]]></content:encoded></item><item><title><![CDATA[Clean invocations of dirty methods]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I recently started to implement a <a href="https://github.com/tomasbjerre/bitbucket-server-java-client">client for a REST API</a>. I was using <a href="http://square.github.io/retrofit/">RetroFit</a> and here is one the resources used by the client.</p>
<pre><code>public interface BitBucketServerService {
 @GET(&quot;/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&amp;at={at}&amp;state={state}&amp;order={order}</code></pre></div>]]></description><link>https://bjurr.com/clean-invocations-of-dirty-methods/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a3</guid><category><![CDATA[Java]]></category><category><![CDATA[Clean Code]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sat, 11 Jun 2016 16:53:14 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I recently started to implement a <a href="https://github.com/tomasbjerre/bitbucket-server-java-client">client for a REST API</a>. I was using <a href="http://square.github.io/retrofit/">RetroFit</a> and here is one the resources used by the client.</p>
<pre><code>public interface BitBucketServerService {
 @GET(&quot;/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&amp;at={at}&amp;state={state}&amp;order={order}&amp;withattributes={withattributes}&amp;withproperties={withproperties}&quot;)
 Call&lt;BitbucketServerResponse&lt;BitBucketServerPullRequest&gt;&gt; pullRequests(//
   @Query(&quot;projectkey&quot;) String projectKey,//
   @Query(&quot;repositoryslug&quot;) String repositoryslug,//
   @Query(&quot;direction&quot;) String direction,//
   @Query(&quot;at&quot;) Integer at,//
   @Query(&quot;state&quot;) String state,//
   @Query(&quot;order&quot;) String order,//
   @Query(&quot;withattributes&quot;) boolean withattributes,//
   @Query(&quot;withproperties&quot;) boolean withproperties);
}
</code></pre>
<p>The problem here is that calls to this service will be dirty. Alot of parameters in each invocation. Alot of strings that can accidentally be added in the wrong order. So just for comparison, here is an invocation of that service.</p>
<pre><code>bitBucketServerService //
 .pullRequests(&quot;projectKey&quot;, &quot;repositoryslug&quot;, &quot;direction&quot;, 1, &quot;state&quot;, &quot;order&quot;, true, true);
</code></pre>
<p>I created <a href="https://github.com/tomasbjerre/java-method-invocation-builder">Java Method Invocation Builder</a>. It adds the <code>@GenerateMethodInvocationBuilder</code> and also <code>@Default</code>. They are added to an interface, or class. It enables default values of method parameters  in Java and is making the invocations readable.</p>
<pre><code>@GenerateMethodInvocationBuilder
public interface BitBucketServerService {
 @GET(&quot;/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&amp;at={at}&amp;state={state}&amp;order={order}&amp;withattributes={withattributes}&amp;withproperties={withproperties}&quot;)
 Call&lt;BitbucketServerResponse&lt;BitBucketServerPullRequest&gt;&gt; pullRequests(//
   @Query(&quot;projectkey&quot;) String projectKey,//
   @Query(&quot;repositoryslug&quot;) String repositoryslug,//
   @Default(&quot;INCOMING&quot;) @Query(&quot;direction&quot;) String direction,//
   @Query(&quot;at&quot;) Integer at,//
   @Default(&quot;OPEN&quot;) @Query(&quot;state&quot;) String state,//
   @Default(&quot;NEWEST&quot;) @Query(&quot;order&quot;) String order,//
   @Default(&quot;true&quot;) @Query(&quot;withattributes&quot;) boolean withattributes,//
   @Default(&quot;true&quot;) @Query(&quot;withproperties&quot;) boolean withproperties);
}
</code></pre>
<p><a href="https://github.com/tomasbjerre/java-method-invocation-builder">Java Method Invocation Builder</a> will generate builders for invoking every method in the <strong>interface</strong>, <strong>or class</strong>. So that the invoking code can look like this instead.</p>
<pre><code>  BitBucketServerServicePullRequestsBuilder.pullRequests()//
    .withProjectKey(&quot;projectKey&quot;)//
    .withRepositoryslug(&quot;repositoryslug&quot;)//
    .withAt(123)//
    .invoke(bitBucketServerService);
</code></pre>
<p>The code is generated as Java files at compile time. I created <a href="https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-maven">Maven</a> and <a href="https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-gradle">Gradle</a> examples to show how to use it.</p>
<p><img src="https://bjurr.com/content/images/2016/06/example_usage.png" alt="Example"></p>
</div>]]></content:encoded></item><item><title><![CDATA[Static code analysis with GitHub]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I previously wrote about <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin">Violation Comments to Bitbucket Server</a> plugin for Jenkins. I wanted to do the same thing with GitHub and Travis, here is the result.</p>
<p><img src="https://bjurr.com/content/images/2016/03/findbugs-github-pr-file-comment.png" alt="Violation comment in GitHub pull request"></p>
<p>You may also have a look at <a href="https://github.com/tomasbjerre/violations-test/pull/2">violations-test</a> repo where I have a live demo of this.</p>
<p>Every time I push to a</p></div>]]></description><link>https://bjurr.com/static-code-analysis-with-github/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a2</guid><category><![CDATA[Static Code Analysis]]></category><category><![CDATA[GitHub]]></category><category><![CDATA[Clean Code]]></category><category><![CDATA[Travis CI]]></category><category><![CDATA[Jenkins]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Fri, 04 Mar 2016 21:30:58 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I previously wrote about <a href="https://wiki.jenkins-ci.org/display/JENKINS/Violation+Comments+to+Bitbucket+Server+Plugin">Violation Comments to Bitbucket Server</a> plugin for Jenkins. I wanted to do the same thing with GitHub and Travis, here is the result.</p>
<p><img src="https://bjurr.com/content/images/2016/03/findbugs-github-pr-file-comment.png" alt="Violation comment in GitHub pull request"></p>
<p>You may also have a look at <a href="https://github.com/tomasbjerre/violations-test/pull/2">violations-test</a> repo where I have a live demo of this.</p>
<p>Every time I push to a pull request, or its target branch, Travis will perform static code analysis and report back to GitHub. I created a <a href="https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin">Maven plugin</a> and <a href="https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin">Gradle plugin</a> to make this possible. I also created a <a href="https://github.com/jenkinsci/violation-comments-to-github-jenkins-plugin">Jenkins plugin</a>.</p>
<p>It supports same format as <a href="https://github.com/tomasbjerre/violations-lib">violations-lib</a>:</p>
<ul>
<li><a href="http://checkstyle.sourceforge.net/"><strong>Checkstyle</strong></a></li>
<li><a href="https://github.com/theandrewdavis/cpplint"><strong>CPPLint</strong></a></li>
<li><a href="http://cppcheck.sourceforge.net/"><strong>CPPCheck</strong></a></li>
<li><a href="https://github.com/CSSLint/csslint"><strong>CSSLint</strong></a></li>
<li><a href="http://findbugs.sourceforge.net/"><strong>Findbugs</strong></a></li>
<li><a href="http://flake8.readthedocs.org/en/latest/"><strong>Flake8</strong></a> (<a href="https://www.pylint.org/"><em>PyLint</em></a>, <a href="https://github.com/PyCQA/pycodestyle"><em>Pep8</em></a>)</li>
<li><a href="http://jshint.com/"><strong>JSHint</strong></a></li>
<li><strong>Lint</strong> A common XML format, used by different linters.</li>
<li><a href="https://github.com/Perl-Critic"><strong>PerlCritic</strong></a></li>
<li><a href="https://pmd.github.io/"><strong>PMD</strong></a></li>
<li><a href="https://www.jetbrains.com/resharper/"><strong>ReSharper</strong></a></li>
<li><a href="http://xmlsoft.org/xmllint.html"><strong>XMLLint</strong></a></li>
</ul>
<p>Many more formats are planned and <a href="https://github.com/tomasbjerre/violations-lib">pull requests</a> are very welcome!</p>
<p>This will <strong>not work in Travis for pull requests from forked repositories</strong>. But <strong>will work great with Travis for internal pull requests</strong>. But that is a <strong>limitation in Travis, not in the plugins</strong> used for reporting. So if you want to do this on pull requests from forked repos you can use a private hosted build server. I created a <strong><a href="https://github.com/tomasbjerre/violation-comments-to-github-jenkins-plugin">Jenkins plugin</a> that can be used for building pull requests from forked repositories</strong>. You may also use the <a href="https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin">Maven plugin</a> or <a href="https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin">Gradle plugin</a> for that.</p>
<p>Here is how to set it up in Travis.</p>
<h1 id="travissetup">Travis setup</h1>
<p>You need to have a user that is allowed to post comments on the pull request. You may use the users username and password, or an OAuth2 token. I will use OAuth2 token in this example. Here is how to create it:</p>
<p><code>curl -u 'yourgithubuser' -d '{&quot;note&quot;:&quot;Violation comments&quot;}' https://api.github.com/authorizations</code></p>
<p>It will prompt for you password and give you back the token.</p>
<p>You need to add it to <code>.travis.yml</code>. Travis provides a nice tool for encrypting the token:</p>
<pre><code>sudo apt-get install ruby-dev
gem install travis
travis encrypt export GITHUB_OAUTH2TOKEN=YOUR TOKEN HERE
</code></pre>
<p>Add the encrypted token to your <code>.travis.yml</code> under env. I'm including the Gradle task here also:</p>
<pre><code>sudo: false
language: java
env:
  - secure: &quot;YOUR ENCRYPTED TOKEN HERE&quot;
jdk:
  - oraclejdk7
script:
  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i --stacktrace
notifications:
  email: false
</code></pre>
<p>Now you need to edit your <code>build.gradle</code> to include the plugin. As mentioned above, there is also a <a href="https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin">Maven plugin</a> with the exact same functionality. This blog post may not be up to date, so best is to check <a href="https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin">Gradle plugin</a> for latest version and config. But here is an example:</p>
<pre><code>  buildscript {
    repositories {
      maven {
        url &quot;https://plugins.gradle.org/m2/&quot;
      }
    }
    dependencies {
      classpath &quot;se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.1&quot;
    }
  }

  apply plugin: &quot;se.bjurr.violations.violation-comments-to-github-gradle-plugin&quot;

  task violationCommentsToGitHub(type: se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {
   repositoryOwner = &quot;tomasbjerre&quot;;
   repositoryName = &quot;violations-test&quot;
   pullRequestId = System.properties['GITHUB_PULLREQUESTID']
   username = System.properties['GITHUB_USERNAME']
   password = System.properties['GITHUB_PASSWORD']
   oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']
   gitHubUrl = &quot;https://api.github.com/&quot;
   createCommentWithAllSingleFileComments = false
   createSingleFileComments = true
   violations = [
    [&quot;FINDBUGS&quot;,   &quot;.&quot;, &quot;.*/findbugs/.*\\.xml\$&quot;],
    [&quot;PMD&quot;,        &quot;.&quot;, &quot;.*/pmd/.*\\.xml\$&quot;],
    [&quot;CHECKSTYLE&quot;, &quot;.&quot;, &quot;.*/checkstyle/.*\\.xml\$&quot;],
    [&quot;JSHINT&quot;,     &quot;.&quot;, &quot;.*/jshint/.*\\.xml\$&quot;],
    [&quot;CSSLINT&quot;,    &quot;.&quot;, &quot;.*/csslint/.*\\.xml\$&quot;]
   ]
  }
</code></pre>
<p>Now all you need to do is to add the task to the build script, as you saw above, you need this:</p>
<pre><code> script:
  - ./gradlew build violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN -i
</code></pre>
</div>]]></content:encoded></item><item><title><![CDATA[Git Changelog Lib - Changelog, or releasenotes, from template]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I define a <strong>changelog</strong> as a document that, for every release, contains a section describing the changes in that release. I define <strong>releasenotes</strong> as the changes made in a specific release. Most notes below can be applied to both, but I'm just going to talk about changelogs. To keep it</p></div>]]></description><link>https://bjurr.com/git-changelog/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a1</guid><category><![CDATA[Git]]></category><category><![CDATA[Jenkins]]></category><category><![CDATA[Stash]]></category><category><![CDATA[changelog]]></category><category><![CDATA[Bitbucket Server]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sat, 19 Dec 2015 09:24:55 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I define a <strong>changelog</strong> as a document that, for every release, contains a section describing the changes in that release. I define <strong>releasenotes</strong> as the changes made in a specific release. Most notes below can be applied to both, but I'm just going to talk about changelogs. To keep it simple.</p>
<h1 id="theproblem">The problem</h1>
<p>Changelogs are important! But there are some problems that comes with having a changelog.</p>
<ul>
<li><strong>Boring</strong> Keeping the changelog updated is boring!</li>
<li><strong>Availability</strong> You may be required to make the changelog available to people who are not developers.</li>
<li><strong>Reliability</strong> Some change may not be in the changelog, or some change may be there but not in the actual release.</li>
<li><strong>Formatting</strong> Very few developers enjoy fiddling with text formatting!</li>
</ul>
<h1 id="othersolutions">Other solutions</h1>
<p>There are some solutions, if you <a href="http://lmgtfy.com/?q=git+changelog">google it</a>. What I was missing in the solutions that I found was:</p>
<ul>
<li><strong>Templating</strong> Companies may have very specific requirements on the formatting of the changelog.</li>
<li><strong>Wiki integration</strong> I needed to publish the changelog in MediaWiki.</li>
</ul>
<h1 id="mysolution">My solution</h1>
<p>Is <a href="https://github.com/tomasbjerre/git-changelog-lib">Git Changelog Lib</a>. A library, Java, that create a changelog for you, using the information that is already in the GIT repository. The lib can be used:</p>
<ul>
<li>With a <a href="https://github.com/tomasbjerre/git-changelog-gradle-plugin">Gradle plugin</a>.</li>
<li>With a <a href="https://github.com/tomasbjerre/git-changelog-maven-plugin">Maven plugin</a>.</li>
<li>With a <a href="https://github.com/jenkinsci/git-changelog-plugin">Jenkins plugin</a>.</li>
<li>With a <a href="https://github.com/tomasbjerre/git-changelog-bitbucket-plugin">Bitbucket Server plugin</a>.</li>
<li>From <a href="https://github.com/tomasbjerre/git-changelog-command-line">command line</a>.</li>
</ul>
<p>The basic idea is to have library that gathers a data structure and supplies it to a Mustache template so that the changelog becomes completely customizable.</p>
<pre><code># Git Changelog changelog

Changelog of Git Changelog.
{{#tags}}
## {{name}}
 {{#issues}}
  {{#hasLink}}
### {{name}} [{{issue}}]({{link}}) {{title}}
  {{/hasLink}}
  {{^hasLink}}
### {{name}} {{title}}
  {{/hasLink}}
  {{#authors}}
* {{authorName}}
   {{#commits}}
[{{hash}}](https://server/{{hash}}) *{{commitTime}}*
{{{message}}}

   {{/commits}}

  {{/authors}}
 {{/issues}}
{{/tags}}
</code></pre>
<p>Some of the features included are:</p>
<ul>
<li><strong>Templating</strong> Using Mustache templates.</li>
<li><strong>MediaWiki</strong> Integrated with MediaWiki to publish changelogs.</li>
<li><strong><a href="https://github.com/jenkinsci/git-changelog-plugin">Jenkins plugin</a></strong> To publish the changelog on Jenkins summary page. Or let Jenkins create MediaWiki page or file in workspace.</li>
<li><strong><a href="https://github.com/tomasbjerre/git-changelog-bitbucket-plugin">Bitbucket Server plugin</a></strong> Adds a changelog in the repository page.</li>
<li><strong><a href="https://github.com/tomasbjerre/git-changelog-gradle-plugin">Gradle plugin</a></strong> To add a changelog task to the Gradle build.</li>
<li><strong><a href="https://github.com/tomasbjerre/git-changelog-maven-plugin">Maven plugin</a></strong> To add a changelog task to the Maven build.</li>
</ul>
</div>]]></content:encoded></item><item><title><![CDATA[Ghost blog on GitHub pages]]></title><description><![CDATA[<div class="kg-card-markdown"><p><strong>Updated version here: <a href="https://bjurr.com/ghost-1-0-free-hosting-with-https/">https://bjurr.com/ghost-1-0-free-hosting-with-https/</a></strong></p>
<p>I just moved this blog from a Raspberry PI to GitHub pages. I was inspired by <a href="https://stefanscherer.github.io/setup-ghost-for-github-pages/">this</a> article. I am also using <a href="https://pypi.python.org/pypi/buster/">Buster</a> but I am doing it a bit different. The repository is <a href="https://github.com/tomasbjerre/tomasbjerre.github.io/">here</a>.</p>
<p>I get HTTPS with custom domain as described</p></div>]]></description><link>https://bjurr.com/ghost-blog-on-github-pages/</link><guid isPermaLink="false">597b4433e521cb4fbd9186a0</guid><category><![CDATA[GitHub]]></category><category><![CDATA[Ghost]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Fri, 18 Dec 2015 13:10:28 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p><strong>Updated version here: <a href="https://bjurr.com/ghost-1-0-free-hosting-with-https/">https://bjurr.com/ghost-1-0-free-hosting-with-https/</a></strong></p>
<p>I just moved this blog from a Raspberry PI to GitHub pages. I was inspired by <a href="https://stefanscherer.github.io/setup-ghost-for-github-pages/">this</a> article. I am also using <a href="https://pypi.python.org/pypi/buster/">Buster</a> but I am doing it a bit different. The repository is <a href="https://github.com/tomasbjerre/tomasbjerre.github.io/">here</a>.</p>
<p>I get HTTPS with custom domain as described in <a href="https://www.jonathan-petitcolas.com/2017/01/13/using-https-with-custom-domain-name-on-github-pages.html">this</a> blog post.</p>
<p>I put together some <a href="https://github.com/tomasbjerre/tomasbjerre.github.io/tree/tools">scripts</a> to ease the blogging.</p>
<ul>
<li><strong><a href="http://install.sh">install.sh</a></strong> Downloads Ghost blogging platform and installs it in the current directory.</li>
<li><strong><a href="http://run.sh">run.sh</a></strong> Starts Ghost blogging platform on <em>localhost</em>. So that it can be edited.</li>
<li><strong><a href="http://commit.sh">commit.sh</a></strong> Saves the blog and commits it to <em>master</em>. The <strong><a href="http://run.sh">run.sh</a></strong> script must be running when this script is invoked.</li>
</ul>
<p><strong><a href="http://commit.sh">commit.sh</a></strong> will create the <em>CNAME</em> file required if you want to use <a href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/">your own domain name</a>.</p>
<p>There will be 3 commits in the repo. The scripts will amend to these when changes are made. This is important to keep the repo small, it may grow very big, very fast if you don't amend.</p>
<pre><code>*       (tools)  Blog maintenance
| *     (master)  Static blog content
|/  
*       Initial commit
</code></pre>
</div>]]></content:encoded></item><item><title><![CDATA[Simple Stash Commit Checker]]></title><description><![CDATA[<div class="kg-card-markdown"><p>Update 160912: There is a <a href="http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/">new post here</a>.</p>
<p>I'm currently working with a customer that has around 30 comitters working on the same code base. We are using Git with Atlassian Stash.</p>
<p>Reccently some code were released to production earlier then planned. Because of a faulty merge about 10 weeks</p></div>]]></description><link>https://bjurr.com/simple-stash-commit-checker/</link><guid isPermaLink="false">597b4433e521cb4fbd91869f</guid><category><![CDATA[Stash]]></category><category><![CDATA[Plugins]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Sun, 01 Mar 2015 21:35:29 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>Update 160912: There is a <a href="http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/">new post here</a>.</p>
<p>I'm currently working with a customer that has around 30 comitters working on the same code base. We are using Git with Atlassian Stash.</p>
<p>Reccently some code were released to production earlier then planned. Because of a faulty merge about 10 weeks earlier. This brings up the subject of commit comments. I started looking around for a good commit checker for Stash. I found mainly one problem with the existing hooks. It was not possible to customize messages shown to comitters when rejected.</p>
<p>So I created <a href="https://marketplace.atlassian.com/plugins/se.bjurr.sscc.sscc">Simple Stash Commit Checker</a>. The code is available <a href="https://github.com/tomasbjerre/simple-stash-commit-checker">here</a>. It is highly configurable. For any rejection reason, there is a configurable response.</p>
<p><img src="https://bjurr.com/content/images/2015/03/config_and_reject.png" alt="Config Email"></p>
<p>Email and author can be checked against corresponding value in Stash.</p>
<p><img src="https://bjurr.com/content/images/2015/03/config.png" alt="Config Email"></p>
<p>If you enable this kind of plugin, the developers may need some time to adjust. Thats why I added a <em>dry run</em> mode. Where rejection messages are shown but no commits are actually rejected.<br>
<img src="https://bjurr.com/content/images/2015/03/dry.png" alt="Dry run"></p>
<p>It is possible to add groups of restrictions. A group could be <em>Issues</em>. And rules in the groups. A rule could be, for example, <em>Jira</em> and/or <em>Incident</em>. And the group could state that at least one issue should be mentioned in the commit.</p>
<p><img src="https://bjurr.com/content/images/2015/03/rules.png" alt="Groups"></p>
<p>The group could also accept commits that does not contain some specific word. Some people like to write <em>fixing review comments</em> or <em>fixing sonar errors</em>. There could be a rule rejecting commits containing <em>sonar</em> or <em>review</em>. With a rejection reason like: <em>It is not relevant to mention that the changes were suggested by Sonar or from a review. It is relevant to mention what is actually changed and how that improves the code.</em></p>
</div>]]></content:encoded></item><item><title><![CDATA[Building Atlassian Stash pull requests in Jenkins]]></title><description><![CDATA[<div class="kg-card-markdown"><p>Update 160912: There is a <a href="http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/">new post here</a>.</p>
<p>We are just about to introduce pull requests at my current position. We are using Git with Atlassian Stash and Jenkins. We want to verify that the pull requests:</p>
<ul>
<li>Compile</li>
<li>Does not break any test cases</li>
<li>Can be merged to target branch</li></ul></div>]]></description><link>https://bjurr.com/building-atlassian-stash-pull-requests-in-jenkins/</link><guid isPermaLink="false">597b4433e521cb4fbd91869e</guid><category><![CDATA[Jenkins]]></category><category><![CDATA[Git]]></category><category><![CDATA[Atlassian]]></category><category><![CDATA[Stash]]></category><category><![CDATA[Pull Request]]></category><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Wed, 18 Feb 2015 16:25:34 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>Update 160912: There is a <a href="http://bjurr.com/continuous-integration-with-bitbucket-server-and-jenkins/">new post here</a>.</p>
<p>We are just about to introduce pull requests at my current position. We are using Git with Atlassian Stash and Jenkins. We want to verify that the pull requests:</p>
<ul>
<li>Compile</li>
<li>Does not break any test cases</li>
<li>Can be merged to target branch</li>
<li>Compiles after merge</li>
<li>Does not break test cases after merge</li>
</ul>
<p>After some Googling around the issue I found no solution, so I tought I'd make a post about how I solved it.</p>
<h1 id="verifyingsourceofthepullrequest">Verifying source of the pull request</h1>
<p>There is a really nice plugin for Jenkins <a href="https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin">Stash Notifier Plugin</a> that can be used to notify Stash of the status of a build. Enable it on any Jenkins job that builds the branch you are merging from. It will add an icon and a link to Jenkins in the pull request view of Stash.</p>
<h1 id="discoveringnewpullrequests">Discovering new pull requests</h1>
<p>I initially solved this with a Jenkins job that is polling Stash for new pull requests. But polling is never good so I created a Stash plugin that will notify Jenkins about new pull requests.</p>
<h2 id="pullrequestnotifierpluginforstash">Pull Request Notifier Plugin for Stash</h2>
<p>The plugin is available in <a href="https://marketplace.atlassian.com/plugins/se.bjurr.prnfs.pull-request-notifier-for-stash">Atlassian Marketplace</a> and at <a href="https://github.com/tomasbjerre/pull-request-notifier-for-stash">GitHub</a>. When installed, you will have this configuration GUI.</p>
<p><img src="https://bjurr.com/content/images/2015/04/variables.png" alt="pull-request-notifier-for-stash"></p>
<p>The features include:</p>
<ul>
<li>Trigger on one, or several, event(s) regarding pull requests.</li>
<li>Invoke one, or several, URL(s) when event(s) are triggered.</li>
<li>Optionally with <em>basic authentication</em> headers.</li>
<li>Completely custom URL supporting variable parameters
<ul>
<li>${PULL_REQUEST_ID} Example: 1</li>
<li>${PULL_REQUEST_ACTION} Example: OPENED</li>
<li>${PULL_REQUEST_AUTHOR_DISPLAY_NAME} Example: Administrator</li>
<li>${PULL_REQUEST_AUTHOR_EMAIL} Example: <a href="mailto:admin@example.com">admin@example.com</a></li>
<li>${PULL_REQUEST_AUTHOR_ID} Example: 1</li>
<li>${PULL_REQUEST_AUTHOR_NAME} Example: admin</li>
<li>${PULL_REQUEST_AUTHOR_SLUG} Example: admin</li>
<li>${PULL_REQUEST_FROM_HASH} Example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad</li>
<li>${PULL_REQUEST_FROM_ID} Example: refs/heads/branch_mod_merge</li>
<li>${PULL_REQUEST_FROM_REPO_ID} Example: 1</li>
<li>${PULL_REQUEST_FROM_REPO_NAME} Example: rep_1</li>
<li>${PULL_REQUEST_FROM_REPO_PROJECT_ID} Example: 1</li>
<li>${PULL_REQUEST_FROM_REPO_PROJECT_KEY} Example: PROJECT_1</li>
<li>${PULL_REQUEST_FROM_REPO_SLUG} Example: rep_1</li>
<li>And same variables for TO, like: ${PULL_REQUEST_TO_HASH}</li>
</ul>
</li>
</ul>
<p>You can have several notifications and have them trigger different URL:s. If you trigger Jenkins builds, you may want each repo to have its own build job in Jenkins. The filtering functionality is highly configurable. Create a string with the variables and then a regexp that should match that string.<br>
<img src="https://bjurr.com/content/images/2015/04/filter_branch_crop.png" alt="pull-request-notifier-for-stash-filter"></p>
<h2 id="pollingjenkinswithgroovyscript">Polling Jenkins with Groovy script</h2>
<p>Note that you should only do it this way if you cannot use the plugin described above! For example, uou may not have enaugh access to Stash to install plugins.</p>
<p>Stash has really nice <a href="https://developer.atlassian.com/static/rest/stash/3.6.1/stash-rest.html">REST API:s</a>. I created a scheduled job in Jenkins that runs every 5 minutes. I implemented it in Groovy using the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Groovy+plugin">Groovy plugin</a>.</p>
<ul>
<li>Find all repos: <a href="http://stash/rest/api/1.0/projects/PROJECTS/repos/">http://stash/rest/api/1.0/projects/PROJECTS/repos/</a></li>
<li>Find all pull requests in a repo: <a href="http://stash/rest/api/1.0/projects/PROJECTS/repos/%22+repo.slug+%22/pull-requests?base&amp;details&amp;filterText&amp;orderBy">http://stash/rest/api/1.0/projects/PROJECTS/repos/&quot;+repo.slug+&quot;/pull-requests?base&amp;details&amp;filterText&amp;orderBy</a></li>
</ul>
<pre><code>String summary = &quot;&quot;
int newPullRequests = 0;
File previousPullRequests = new File(&quot;/ci/lib/jenkins/workspace/Pull Request Poller/previousPullRequests.txt&quot;)

String getJson(String addr) {
 manager.listener.logger.println(&quot;Getting URL: &quot;+addr)
 def authString = &quot;user:pass&quot;.getBytes().encodeBase64().toString()
 java.net.URLConnection conn = addr.toURL().openConnection()
 conn.setRequestProperty( &quot;Authorization&quot;, &quot;Basic ${authString}&quot; )
 conn.connect()
 def reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))
 def stringBuilder = new StringBuilder()
 String line = null
 while ((line = reader.readLine()) != null) {
  stringBuilder.append(line + &quot;\n&quot;)
 }
 String json = groovy.json.JsonOutput.prettyPrint(stringBuilder.toString())
 manager.listener.logger.println(&quot;Got response:\n&quot;+json)
 return json
}

new groovy.json.JsonSlurper().parseText(getJson(&quot;http://stash/rest/api/1.0/projects/PROJECTS/repos/&quot;)).values.each { repo -&gt;
 manager.listener.logger.println(&quot;Repo: &quot;+repo.slug)

 String prettyJSON = getJson(&quot;http://stash/rest/api/1.0/projects/PROJECTS/repos/&quot;+repo.slug+&quot;/pull-requests?base&amp;details&amp;filterText&amp;orderBy&quot;)
 def jsonData = new groovy.json.JsonSlurper().parseText(prettyJSON);
 jsonData.values.each { value -&gt;
  String title = value.title
  String from = value.fromRef.latestChangeset
  String fromRepo = value.fromRef.repository.links.clone.find { it.name == &quot;ssh&quot; }.href
  String to = value.toRef.latestChangeset
  String toRepo = value.toRef.repository.links.clone.find { it.name == &quot;ssh&quot; }.href
  String repositorySlug = repo.slug
  String pullRequestId = value.id
  String requestUrl =  &quot;http://stash/projects/PROJECTS/repos/&quot;+repositorySlug+&quot;/pull-requests/&quot;+pullRequestId+&quot;/overview&quot;

  //Remember that this request has been triggered, and avoid triggering it again
  String identifier = from+&quot; &quot;+to
  if (previousPullRequests.text.contains(identifier)) {
   manager.listener.logger.println(&quot;Ignoring: &quot;+identifier)
   return;
  }
  previousPullRequests.append(identifier+&quot;\n&quot;)

  //Trigger a jenkins job that will verify the pull request
  String invokeBuildUrl = &quot;http://jenkins/job/Pull%20Request%20Builder/buildWithParameters?token=SECRET_CONFIGURED_IN_BUILD&amp;FROM=&quot;+from+&quot;&amp;TO=&quot;+to+&quot;&amp;FROMREPO=&quot;+fromRepo+&quot;&amp;TOREPO=&quot;+toRepo+&quot;&amp;REPOSITORY_SLUG=&quot;+repositorySlug+&quot;&amp;PULL_REQUEST_ID=&quot;+pullRequestId
  manager.listener.logger.println(invokeBuildUrl)
  new URL(invokeBuildUrl).getText()

  summary += &quot;&lt;h1&gt;&quot;+title+&quot;&lt;/h1&gt;&lt;br&gt;&lt;a href='&quot;+requestUrl+&quot;'&gt;&quot;+requestUrl+&quot;&lt;/a&gt;&lt;br&gt;From: &quot;+jsonData.values[0].fromRef.id+&quot; (&quot;+from+&quot;) in &quot;+fromRepo+&quot;&lt;br&gt;To: &quot;+jsonData.values[0].toRef.id+&quot; (&quot;+to+&quot;) in &quot;+toRepo+&quot;&lt;br&gt;&lt;a href='&quot;+invokeBuildUrl+&quot;'&gt;&quot;+invokeBuildUrl+&quot;&lt;/a&gt;&lt;hr&gt;&quot;
  newPullRequests++;
 }
}

//Add some info to the build
if (newPullRequests == 0) {
 manager.createSummary(&quot;gear2.gif&quot;).appendText(&quot;&lt;h1&gt;No new pull requests found!&lt;/h1&gt;&quot; , false)
} else {
 manager.addShortText(&quot;+&quot;+newPullRequests, &quot;grey&quot;, &quot;white&quot;, &quot;0px&quot;, &quot;white&quot;)
 manager.createSummary(&quot;gear2.gif&quot;).appendText(summary , false)
}
</code></pre>
<h1 id="mergingandbuildingthepullrequest">Merging and building the pull request</h1>
<p>I created a parameterized job to merge the pull request from source branch to target branch. It takes <em>FROM_HASH</em>, <em>FROM_REPO</em>, <em>TO_HASH</em>, <em>TO_REPO</em>, <em>REPOSITORY_SLUG</em> and <em>PULL_REQUEST_ID</em> as parameters.</p>
<p>The job has a build step <em>execute shell</em> that does the actual verification.</p>
<pre><code>git clone $TO_REPO
cd *
git reset --hard $TO_HASH
git status
git remote add from $FROM_REPO
git fetch from
git merge $FROM_HASH
git --no-pager log --max-count=10 --graph --abbrev-commit

#compile command here ...
</code></pre>
<p>The job uses the <a href="https://wiki.jenkins-ci.org/display/JENKINS/StashNotifier+Plugin">Stash Notifier Plugin</a> to record result in the pull request in Stash. Use the ${FROM_HASH} variable to get the build status reported correctly in the pull request in Stash.</p>
<p>It adds a comment to the pull request, like this.</p>
<pre><code>curl -D- -u user:pass -X POST -H &quot;Content-Type: application/json&quot;  --data &quot;{ \&quot;text\&quot;: \&quot;Looking good :) http://jenkins/job/Pull%20Request%20Builder/${BUILD_NUMBER}/\&quot; }&quot; http://stash/rest/api/1.0/projects/PROJECT/repos/$REPOSITORY_SLUG/pull-requests/$PULL_REQUEST_ID/comments
</code></pre>
<h1 id="staticcodeanalyzers">Static code analyzers</h1>
<p>If you are using static code analyzers you may want to have a look at <a href="https://github.com/jenkinsci/jenkins-violation-comments-to-stash-plugin">Jenkins Violation Comments to Stash Plugin</a> for Jenkins.</p>
<p>It is configured like this.</p>
<p><img src="https://bjurr.com/content/images/2015/05/screenshot-config.png" alt="alt"></p>
<p>And will comment the pull requests like this.</p>
<p><img src="https://bjurr.com/content/images/2015/05/screenshot-stash.png" alt="alt"></p>
</div>]]></content:encoded></item><item><title><![CDATA[Web Traffic Simulator]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I've started working on this test/monitoring tool. The initial idea was that I wanted to simulate having some visitors on the webpage I was working on. That is in the test environment, not available on the Internet.</p>
<p>Then I came accross a tool, <a href="http://siteimprove.se/">SiteImprove</a>, that helps editor find spelling</p></div>]]></description><link>https://bjurr.com/web-traffic-simulator/</link><guid isPermaLink="false">597b4433e521cb4fbd91869d</guid><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Tue, 09 Dec 2014 22:11:14 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I've started working on this test/monitoring tool. The initial idea was that I wanted to simulate having some visitors on the webpage I was working on. That is in the test environment, not available on the Internet.</p>
<p>Then I came accross a tool, <a href="http://siteimprove.se/">SiteImprove</a>, that helps editor find spelling errors, dead links, unwanted texts like &quot;lorum ipsum&quot;... so those use cases were also added.</p>
<p>It is an ongoing project. Implemented as a core, which is basically a crawler, and plugins that can listen to the core, or each other. There will be some plugins in the initial release, for HTML validation and spell checking for example. Any user can easily write his or her own plugins.</p>
<p>Check it out at <a href="https://github.com/web-traffic-simulator/web-traffic-simulator">GitHub</a> =)</p>
</div>]]></content:encoded></item><item><title><![CDATA[Nu Validator offline implementation]]></title><description><![CDATA[<div class="kg-card-markdown"><p>I struggled alot before I got this working. In my case I want to validate a webpage, as HTML5, using a Jenkins job. I dont want to have to deploy anything to do the validation, just use a library and do it all offline.</p>
<p>I found <a href="https://validator.nu/">Nu Validator</a> which seems</p></div>]]></description><link>https://bjurr.com/nu-validator-offline-implementation/</link><guid isPermaLink="false">597b4433e521cb4fbd91869c</guid><dc:creator><![CDATA[Tomas Bjerre]]></dc:creator><pubDate>Thu, 20 Nov 2014 22:48:30 GMT</pubDate><content:encoded><![CDATA[<div class="kg-card-markdown"><p>I struggled alot before I got this working. In my case I want to validate a webpage, as HTML5, using a Jenkins job. I dont want to have to deploy anything to do the validation, just use a library and do it all offline.</p>
<p>I found <a href="https://validator.nu/">Nu Validator</a> which seems to be working great. Started looking for its implementation, its Java, great! =)</p>
<p>Started looking into the code, trying to figure out how to use it... It is very unclear and after some googling I found out that I'm definitly not alone with that opinion.</p>
<p>I came up with a great solution that I'd like to share.</p>
<p>There is a WAR in the release. It contains an API. Basically I am using Jetty to start a tiny webserver, deploying the WAR in it, invoking the API and stopping the server.</p>
<p>Check it out at <a href="https://github.com/tomasbjerre/validatortest">GitHub</a>!</p>
</div>]]></content:encoded></item></channel></rss>